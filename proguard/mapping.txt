android.os.FileUtils -> android.os.FileUtils:
    java.util.regex.Pattern SAFE_FILENAME_PATTERN -> a
    int setPermissions(java.lang.String,int,int,int) -> setPermissions
com.coleman.kingword.ColorSetActivityAsDialog -> com.coleman.kingword.ColorSetActivityAsDialog:
    java.lang.String TAG -> b
    com.coleman.log.Log Log -> c
    android.widget.TextView textFont -> d
    android.widget.RadioGroup sceneMode -> e
    android.widget.RadioGroup fontOrBgMode -> f
    android.widget.TextView textRed -> g
    android.widget.TextView textGreen -> h
    android.widget.TextView textBlue -> i
    android.widget.TextView textTrans -> j
    android.widget.SeekBar seekRed -> k
    android.widget.SeekBar seekGreen -> l
    android.widget.SeekBar seekBlue -> m
    android.widget.SeekBar seekTrans -> n
    android.widget.Button btnOk -> o
    android.widget.Button btnCancel -> p
    android.widget.Button btnReset -> q
    int selectMode -> r
    int[][] MODE_COLOR -> a
    int[] textColor -> s
    int[] bgColor -> t
    int[] selectColor -> u
    void onCreate(android.os.Bundle) -> onCreate
    int getIdbyMode(int) -> a
    void initView() -> b
    void onClick(android.view.View) -> onClick
    void reset() -> c
    void exit() -> d
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
    void setColor() -> a
    void setSeekProgress() -> e
    void onCheckedChanged(android.widget.RadioGroup,int) -> onCheckedChanged
    void setSelectMode(int) -> b
com.coleman.kingword.CoreActivity -> com.coleman.kingword.CoreActivity:
    java.lang.String TAG -> b
    com.coleman.log.Log Log -> c
    android.widget.ProgressBar progressBarDay -> d
    android.widget.ProgressBar progressBarNight -> e
    android.widget.TextView textView -> f
    android.widget.ListView listView -> g
    java.util.ArrayList list -> h
    com.coleman.kingword.CoreActivity$ParaphraseAdapter adapter -> i
    com.coleman.kingword.wordlist.AbsSubVisitor sublistVisitor -> j
    android.widget.LinearLayout container -> k
    com.coleman.kingword.wordlist.WordVisitor wordVisitor -> l
    android.widget.Button viewWord -> m
    android.widget.Button addOrRemove -> n
    android.widget.Button ignoreOrNot -> o
    android.widget.TextView continueView -> p
    android.widget.TextView loopView -> q
    android.widget.Button countBtn -> r
    int continueHitCount -> s
    com.coleman.kingword.CoreActivity$Anim anim -> t
    android.widget.Button btnSpeak -> u
    boolean autoSpeak -> v
    com.coleman.kingword.CoreActivity$PlayControl playControl -> w
    boolean openTabList -> x
    com.coleman.kingword.inspirit.countdown.CountdownManager countdownManager -> a
    java.util.ArrayList _buflist -> y
    android.os.Handler handler -> z
    void onCreate(android.os.Bundle) -> onCreate
    void startPreload() -> c
    void stopPreload() -> d
    void onPause() -> onPause
    void onResume() -> onResume
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onClick(android.view.View) -> onClick
    boolean onLongClick(android.view.View) -> onLongClick
    void finish() -> finish
    void onBackPressed() -> onBackPressed
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void showAnimSelect() -> e
    void broadcastReview() -> f
    void setReadMode() -> g
    void startSubListActivity() -> h
    void updateLoopCount() -> i
    void slideRightIn(android.widget.Button) -> a
    void slideRightOut(android.view.View) -> a
    void initView() -> j
    void apply3DAnim(float,float) -> a
    void applyFadeAnim() -> k
    void applySlideAnim() -> l
    void applySlideIn() -> m
    void lookupInDict(com.coleman.kingword.wordlist.WordVisitor) -> a
    void showSubListReachEndDialog() -> n
    void showCompleteStudyDialog() -> o
    void access$0(com.coleman.kingword.CoreActivity) -> a
    void access$1(com.coleman.kingword.CoreActivity) -> b
    android.widget.Button access$2(com.coleman.kingword.CoreActivity) -> c
    java.util.ArrayList access$3(com.coleman.kingword.CoreActivity) -> d
    com.coleman.kingword.wordlist.WordVisitor access$4(com.coleman.kingword.CoreActivity) -> e
    java.util.ArrayList access$5(com.coleman.kingword.CoreActivity) -> f
    android.widget.TextView access$6(com.coleman.kingword.CoreActivity) -> g
    com.coleman.kingword.CoreActivity$ParaphraseAdapter access$7(com.coleman.kingword.CoreActivity) -> h
    android.widget.LinearLayout access$8(com.coleman.kingword.CoreActivity) -> i
    android.widget.ListView access$9(com.coleman.kingword.CoreActivity) -> j
    void access$10(com.coleman.kingword.CoreActivity,com.coleman.kingword.wordlist.WordVisitor) -> a
    com.coleman.kingword.wordlist.AbsSubVisitor access$11(com.coleman.kingword.CoreActivity) -> k
    void access$12(com.coleman.kingword.CoreActivity,com.coleman.kingword.wordlist.WordVisitor) -> b
    android.widget.Button access$13(com.coleman.kingword.CoreActivity) -> l
    void access$14(com.coleman.kingword.CoreActivity) -> m
    void access$15(com.coleman.kingword.CoreActivity) -> n
    android.os.Handler access$16(com.coleman.kingword.CoreActivity) -> o
    android.widget.ProgressBar access$17(com.coleman.kingword.CoreActivity) -> p
    android.widget.ProgressBar access$18(com.coleman.kingword.CoreActivity) -> q
    android.widget.Button access$19(com.coleman.kingword.CoreActivity) -> r
    android.widget.Button access$20(com.coleman.kingword.CoreActivity) -> s
    void access$21(com.coleman.kingword.CoreActivity) -> t
    com.coleman.log.Log access$22() -> a
    java.lang.String access$23() -> b
    com.coleman.kingword.CoreActivity$Anim access$24(com.coleman.kingword.CoreActivity) -> u
    void access$25(com.coleman.kingword.CoreActivity,float,float) -> a
    void access$26(com.coleman.kingword.CoreActivity) -> v
    void access$27(com.coleman.kingword.CoreActivity) -> w
    boolean access$28(com.coleman.kingword.CoreActivity) -> x
    com.coleman.kingword.CoreActivity$PlayControl access$29(com.coleman.kingword.CoreActivity) -> y
    void access$30(com.coleman.kingword.CoreActivity,boolean) -> a
    android.widget.Button access$31(com.coleman.kingword.CoreActivity) -> z
    void access$32(com.coleman.kingword.CoreActivity,com.coleman.kingword.wordlist.AbsSubVisitor) -> a
    void access$33(com.coleman.kingword.CoreActivity,com.coleman.kingword.CoreActivity$Anim) -> a
com.coleman.kingword.CoreActivity$1 -> com.coleman.kingword.q:
    com.coleman.kingword.CoreActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.coleman.kingword.CoreActivity$10 -> com.coleman.kingword.z:
    com.coleman.kingword.CoreActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.coleman.kingword.CoreActivity$11 -> com.coleman.kingword.af:
    com.coleman.kingword.CoreActivity this$0 -> a
    void onCancel(android.content.DialogInterface) -> onCancel
com.coleman.kingword.CoreActivity$2 -> com.coleman.kingword.o:
    com.coleman.kingword.CoreActivity this$0 -> a
    android.content.Intent val$data -> b
    void run() -> run
    com.coleman.kingword.CoreActivity access$0(com.coleman.kingword.CoreActivity$2) -> a
com.coleman.kingword.CoreActivity$2$1 -> com.coleman.kingword.k:
    com.coleman.kingword.CoreActivity$2 this$1 -> a
    void run() -> run
com.coleman.kingword.CoreActivity$3 -> com.coleman.kingword.p:
    com.coleman.kingword.CoreActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.coleman.kingword.CoreActivity$4 -> com.coleman.kingword.t:
    com.coleman.kingword.CoreActivity this$0 -> a
    android.widget.Button val$view -> b
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
com.coleman.kingword.CoreActivity$5 -> com.coleman.kingword.u:
    com.coleman.kingword.CoreActivity this$0 -> a
    android.view.View val$view -> b
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
com.coleman.kingword.CoreActivity$6 -> com.coleman.kingword.r:
    com.coleman.kingword.CoreActivity this$0 -> a
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    com.coleman.kingword.CoreActivity access$0(com.coleman.kingword.CoreActivity$6) -> a
com.coleman.kingword.CoreActivity$6$1 -> com.coleman.kingword.au:
    com.coleman.kingword.CoreActivity$6 this$1 -> a
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
com.coleman.kingword.CoreActivity$7 -> com.coleman.kingword.s:
    com.coleman.kingword.CoreActivity this$0 -> a
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    com.coleman.kingword.CoreActivity access$0(com.coleman.kingword.CoreActivity$7) -> a
com.coleman.kingword.CoreActivity$7$1 -> com.coleman.kingword.av:
    com.coleman.kingword.CoreActivity$7 this$1 -> a
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
com.coleman.kingword.CoreActivity$8 -> com.coleman.kingword.m:
    com.coleman.kingword.CoreActivity this$0 -> a
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    com.coleman.kingword.CoreActivity access$0(com.coleman.kingword.CoreActivity$8) -> a
com.coleman.kingword.CoreActivity$8$1 -> com.coleman.kingword.d:
    com.coleman.kingword.CoreActivity$8 this$1 -> a
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
com.coleman.kingword.CoreActivity$9 -> com.coleman.kingword.n:
    com.coleman.kingword.CoreActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.coleman.kingword.CoreActivity$Anim -> com.coleman.kingword.c:
    com.coleman.kingword.CoreActivity$Anim ANIM_3D -> a
    com.coleman.kingword.CoreActivity$Anim ANIM_FADE -> b
    com.coleman.kingword.CoreActivity$Anim ANIM_SLIDE -> c
    int type -> d
    com.coleman.kingword.CoreActivity$Anim[] ENUM$VALUES -> e
    int getType() -> a
    com.coleman.kingword.CoreActivity$Anim getAnim(int) -> a
    com.coleman.kingword.CoreActivity$Anim[] values() -> values
    com.coleman.kingword.CoreActivity$Anim valueOf(java.lang.String) -> valueOf
com.coleman.kingword.CoreActivity$DisplayNextView -> com.coleman.kingword.x:
    com.coleman.kingword.CoreActivity this$0 -> a
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
com.coleman.kingword.CoreActivity$ExpensiveTask -> com.coleman.kingword.i:
    byte taskType -> b
    com.coleman.kingword.CoreActivity this$0 -> a
    int[] $SWITCH_TABLE$com$coleman$kingword$CoreActivity$Anim -> c
    void onPreExecute() -> onPreExecute
    android.os.Bundle doInBackground(java.lang.Void[]) -> a
    void onPostExecute(android.os.Bundle) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    int[] $SWITCH_TABLE$com$coleman$kingword$CoreActivity$Anim() -> a
com.coleman.kingword.CoreActivity$ParaphraseAdapter -> com.coleman.kingword.l:
    android.view.LayoutInflater inflater -> a
    android.graphics.Typeface mFace -> b
    com.coleman.kingword.CoreActivity this$0 -> c
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.coleman.kingword.CoreActivity$PlayControl -> com.coleman.kingword.ax:
    android.speech.tts.TextToSpeech tts -> b
    boolean ongoing -> c
    android.os.Handler handler -> d
    boolean usable -> e
    com.coleman.kingword.CoreActivity this$0 -> a
    void speak(java.lang.String) -> a
    void play() -> a
    void stop() -> b
    void shutdown() -> c
    void setUnlocked() -> d
    void setLocked() -> e
    void onUtteranceCompleted(java.lang.String) -> onUtteranceCompleted
    void onInit(int) -> onInit
    boolean access$0(com.coleman.kingword.CoreActivity$PlayControl) -> a
    boolean access$1(com.coleman.kingword.CoreActivity$PlayControl) -> b
    com.coleman.kingword.CoreActivity access$2(com.coleman.kingword.CoreActivity$PlayControl) -> c
com.coleman.kingword.CoreActivity$PlayControl$1 -> com.coleman.kingword.v:
    com.coleman.kingword.CoreActivity$PlayControl this$1 -> a
    java.lang.String val$utteranceId -> b
    void run() -> run
com.coleman.kingword.CoreActivity$Rotate3dAnimation -> com.coleman.kingword.f:
    float mFromDegrees -> b
    float mToDegrees -> c
    float mCenterX -> d
    float mCenterY -> e
    float mDepthZ -> f
    boolean mReverse -> g
    android.graphics.Camera mCamera -> h
    com.coleman.kingword.CoreActivity this$0 -> a
    void initialize(int,int,int,int) -> initialize
    void applyTransformation(float,android.view.animation.Transformation) -> applyTransformation
com.coleman.kingword.CoreActivity$SwapViews -> com.coleman.kingword.y:
    com.coleman.kingword.CoreActivity this$0 -> a
    void run() -> run
    com.coleman.kingword.CoreActivity access$0(com.coleman.kingword.CoreActivity$SwapViews) -> a
com.coleman.kingword.CoreActivity$SwapViews$1 -> com.coleman.kingword.at:
    com.coleman.kingword.CoreActivity$SwapViews this$1 -> a
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
com.coleman.kingword.CoreActivity2 -> com.coleman.kingword.CoreActivity2:
    java.lang.String TAG -> a
    com.coleman.log.Log Log -> b
    com.coleman.kingword.wordlist.AbsSubVisitor subVisitor -> c
    android.widget.ListView listView -> d
    com.coleman.kingword.CoreActivity2$MyAdapter myAdapter -> e
    android.widget.ProgressBar progressBar -> f
    int scrollState -> g
    boolean startScroll -> h
    java.util.ArrayList tasklist -> i
    android.graphics.Typeface mFace -> j
    void onCreate(android.os.Bundle) -> onCreate
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onClick(android.view.View) -> onClick
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onBackPressed() -> onBackPressed
    void onDestroy() -> onDestroy
    void showOperation(int) -> a
    void showDetail(int) -> b
    void setReadMode() -> a
    void access$0(com.coleman.kingword.CoreActivity2,int) -> a
    void access$1(com.coleman.kingword.CoreActivity2,int) -> b
    android.graphics.Typeface access$2(com.coleman.kingword.CoreActivity2) -> a
    void access$3(com.coleman.kingword.CoreActivity2,android.widget.ProgressBar) -> a
    android.widget.ProgressBar access$4(com.coleman.kingword.CoreActivity2) -> b
    com.coleman.kingword.wordlist.AbsSubVisitor access$5(com.coleman.kingword.CoreActivity2) -> c
    void access$6(com.coleman.kingword.CoreActivity2,com.coleman.kingword.wordlist.AbsSubVisitor) -> a
    com.coleman.kingword.CoreActivity2$MyAdapter access$7(com.coleman.kingword.CoreActivity2) -> d
    void access$8(com.coleman.kingword.CoreActivity2,com.coleman.kingword.CoreActivity2$MyAdapter) -> a
    android.widget.ListView access$9(com.coleman.kingword.CoreActivity2) -> e
    java.util.ArrayList access$10(com.coleman.kingword.CoreActivity2) -> f
com.coleman.kingword.CoreActivity2$1 -> com.coleman.kingword.e:
    com.coleman.kingword.CoreActivity2 this$0 -> a
    boolean[] val$arg1 -> b
    com.coleman.kingword.history.WordInfo val$info -> c
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.coleman.kingword.CoreActivity2$1_Adapter -> com.coleman.kingword.w:
    com.coleman.kingword.CoreActivity2 this$0 -> a
    java.lang.String[] val$arg0 -> b
    boolean[] val$arg1 -> c
    int getCount() -> getCount
    java.lang.String getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
com.coleman.kingword.CoreActivity2$DismissAlertDialog -> com.coleman.kingword.a:
    android.content.Context mContext -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
com.coleman.kingword.CoreActivity2$ExpensiveTask -> com.coleman.kingword.ag:
    int type -> b
    boolean loading -> c
    boolean resetState -> d
    android.app.ProgressDialog pd -> e
    com.coleman.kingword.CoreActivity2 this$0 -> a
    void onPreExecute() -> onPreExecute
    java.lang.Void doInBackground(java.lang.Integer[]) -> a
    void onProgressUpdate(java.lang.Integer[]) -> b
    void onPostExecute(java.lang.Void) -> a
    void onCancel(android.content.DialogInterface) -> onCancel
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void onProgressUpdate(java.lang.Object[]) -> onProgressUpdate
    void access$3(com.coleman.kingword.CoreActivity2$ExpensiveTask,boolean) -> a
    void access$4(com.coleman.kingword.CoreActivity2$ExpensiveTask,boolean) -> b
com.coleman.kingword.CoreActivity2$MyAdapter -> com.coleman.kingword.as:
    com.coleman.kingword.wordlist.AbsSubVisitor asv -> b
    com.coleman.kingword.CoreActivity2 this$0 -> a
    int getCount() -> getCount
    com.coleman.kingword.wordlist.WordVisitor getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
    com.coleman.kingword.CoreActivity2 access$2(com.coleman.kingword.CoreActivity2$MyAdapter) -> a
com.coleman.kingword.CoreActivity2$MyAdapter$1 -> com.coleman.kingword.g:
    com.coleman.kingword.CoreActivity2$MyAdapter this$1 -> a
    int val$position -> b
    void onClick(android.view.View) -> onClick
com.coleman.kingword.CoreActivity2$MyAdapter$2 -> com.coleman.kingword.h:
    com.coleman.kingword.CoreActivity2$MyAdapter this$1 -> a
    int val$position -> b
    void onClick(android.view.View) -> onClick
com.coleman.kingword.ReviewSettings -> com.coleman.kingword.ReviewSettings:
    java.lang.String TAG -> a
    com.coleman.log.Log Log -> b
    android.preference.Preference time1 -> c
    android.preference.Preference time2 -> d
    android.preference.Preference time3 -> e
    android.preference.CheckBoxPreference cbpre -> f
    java.text.SimpleDateFormat format -> g
    void onCreate(android.os.Bundle) -> onCreate
    void initUI() -> c
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
    void checkFixedModeSelect() -> d
    void checkDepandency() -> e
    void showSetReviewTime(android.preference.Preference,int,java.lang.String) -> a
    java.text.SimpleDateFormat access$0() -> a
    com.coleman.log.Log access$1() -> b
com.coleman.kingword.ReviewSettings$1 -> com.coleman.kingword.aw:
    com.coleman.kingword.ReviewSettings this$0 -> a
    android.preference.Preference val$pre -> b
    int val$which -> c
    void onTimeSet(android.widget.TimePicker,int,int) -> onTimeSet
com.coleman.kingword.Settings -> com.coleman.kingword.Settings:
    java.lang.String TAG -> a
    com.coleman.log.Log Log -> b
    android.preference.Preference prefViewMethod -> c
    android.preference.Preference prefDatabaseSet -> d
    android.preference.Preference prefBackup -> e
    android.preference.Preference prefRestore -> f
    void onCreate(android.os.Bundle) -> onCreate
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
    void showBackupDialog() -> b
    void showBackupItems() -> c
    void backupDB(android.content.Context,boolean) -> b
    void showRestoreDialog() -> d
    void showRestoreItems() -> e
    void restoreDB(android.content.Context,boolean) -> a
    void showLanguageDialog() -> f
    void showSummaryInfoDB() -> g
    void showDetailedInfoDB() -> h
    void showViewMethodConfigDialog() -> i
    void mapIntToStr(java.util.ArrayList,java.util.ArrayList) -> a
    void mapStrToInt(java.util.ArrayList,java.util.ArrayList) -> b
    void access$0(com.coleman.kingword.Settings) -> a
    void access$1(com.coleman.kingword.Settings,android.content.Context,boolean) -> a
    void access$2(com.coleman.kingword.Settings) -> b
    void access$3(com.coleman.kingword.Settings) -> c
    void access$4(com.coleman.kingword.Settings) -> d
    void access$5(com.coleman.kingword.Settings,java.util.ArrayList,java.util.ArrayList) -> a
    void access$6(com.coleman.kingword.Settings,java.util.ArrayList,java.util.ArrayList) -> b
    com.coleman.log.Log access$7() -> a
com.coleman.kingword.Settings$1 -> com.coleman.kingword.ai:
    com.coleman.kingword.Settings this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.coleman.kingword.Settings$10 -> com.coleman.kingword.ae:
    com.coleman.kingword.Settings this$0 -> a
    java.lang.String[] val$values -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.coleman.kingword.Settings$11 -> com.coleman.kingword.ad:
    com.coleman.kingword.Settings this$0 -> a
    java.lang.String[] val$values -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.coleman.kingword.Settings$12 -> com.coleman.kingword.ac:
    com.coleman.kingword.Settings this$0 -> a
    android.widget.RadioButton val$radioSub -> b
    android.widget.RadioButton val$radioReview -> c
    android.widget.RadioButton val$radioNewbook -> d
    android.widget.RadioButton val$radioIgnore -> e
    java.util.ArrayList val$list -> f
    java.util.ArrayList val$result -> g
    com.coleman.kingword.Settings$1Index val$selectIndex -> h
    android.widget.ArrayAdapter val$listViewAdapter -> i
    void onClick(android.view.View) -> onClick
com.coleman.kingword.Settings$13 -> com.coleman.kingword.ab:
    com.coleman.kingword.Settings this$0 -> a
    java.util.ArrayList val$list -> b
    java.lang.String[] val$spinnerArr -> c
    android.widget.Spinner val$spinner1 -> d
    android.widget.ArrayAdapter val$listViewAdapter -> e
    void onClick(android.view.View) -> onClick
com.coleman.kingword.Settings$14 -> com.coleman.kingword.aa:
    com.coleman.kingword.Settings this$0 -> a
    java.util.ArrayList val$list -> b
    java.util.ArrayList val$result -> c
    com.coleman.kingword.Settings$1Index val$selectIndex -> d
    void onClick(android.content.DialogInterface,int) -> onClick
com.coleman.kingword.Settings$1Index -> com.coleman.kingword.j:
    int i -> a
    com.coleman.kingword.Settings this$0 -> b
com.coleman.kingword.Settings$2 -> com.coleman.kingword.ah:
    com.coleman.kingword.Settings this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.coleman.kingword.Settings$3 -> com.coleman.kingword.an:
    com.coleman.kingword.Settings this$0 -> a
    boolean val$toast -> b
    android.content.Context val$context -> c
    void handleMessage(android.os.Message) -> handleMessage
com.coleman.kingword.Settings$4 -> com.coleman.kingword.am:
    com.coleman.kingword.Settings this$0 -> a
    android.os.Handler val$handler -> b
    void run() -> run
com.coleman.kingword.Settings$5 -> com.coleman.kingword.ap:
    com.coleman.kingword.Settings this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.coleman.kingword.Settings$6 -> com.coleman.kingword.ao:
    com.coleman.kingword.Settings this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.coleman.kingword.Settings$7 -> com.coleman.kingword.ak:
    boolean val$toast -> a
    android.content.Context val$context -> b
    void handleMessage(android.os.Message) -> handleMessage
com.coleman.kingword.Settings$8 -> com.coleman.kingword.aj:
    android.os.Handler val$handler -> a
    void run() -> run
com.coleman.kingword.Settings$9 -> com.coleman.kingword.al:
    com.coleman.kingword.Settings this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.coleman.kingword.UpgradeService -> com.coleman.kingword.UpgradeService:
    java.lang.String TAG -> a
    com.coleman.log.Log Log -> b
    void onCreate() -> onCreate
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onDestroy() -> onDestroy
    void downloadVersion(android.content.Context,com.coleman.ojm.bean.VersionCheckResp) -> a
    void downloadVersion(java.lang.String,java.lang.String) -> a
com.coleman.kingword.UpgradeService$1 -> com.coleman.kingword.b:
    com.coleman.kingword.UpgradeService this$0 -> a
    java.lang.String val$fileName -> b
    java.lang.String val$url -> c
    void run() -> run
com.coleman.kingword.WelcomeActivity -> com.coleman.kingword.WelcomeActivity:
    java.lang.String TAG -> a
    com.coleman.log.Log Log -> b
    android.widget.Button startButton -> c
    android.widget.TextView curTV -> d
    android.widget.TextView nextTV -> e
    boolean userCheck -> f
    android.app.Dialog versionCheckDialog -> g
    android.app.AlertDialog dbUpgradeDialog -> h
    android.widget.FrameLayout flayout -> i
    com.coleman.ojm.http.SLResponse slVersionCheckResp -> j
    void onCreate(android.os.Bundle) -> onCreate
    void setColorMode() -> a
    void setup() -> b
    void login() -> c
    void upgradeCheck() -> d
    void init() -> e
    void onResume() -> onResume
    void onPause() -> onPause
    void onDestroy() -> onDestroy
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void userCheck() -> f
    void showLevelInfo() -> g
    void showSettings() -> h
    void showAboutDev() -> i
    void initLevels() -> j
    void update(java.lang.Object) -> a
    void dismiss(android.app.Dialog) -> a
com.coleman.kingword.WelcomeActivity$1 -> com.coleman.kingword.aq:
    com.coleman.kingword.WelcomeActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.coleman.kingword.WelcomeActivity$2 -> com.coleman.kingword.ar:
    com.coleman.kingword.WelcomeActivity this$0 -> a
    com.coleman.ojm.bean.VersionCheckResp val$bean -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.coleman.kingword.dict.DictLoadService -> com.coleman.kingword.dict.DictLoadService:
    java.lang.String TAG -> a
    com.coleman.log.Log Log -> b
    void onCreate() -> onCreate
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onDestroy() -> onDestroy
com.coleman.kingword.dict.DictLoadService$1 -> com.coleman.kingword.dict.a:
    com.coleman.kingword.dict.DictLoadService this$0 -> a
    void run() -> run
com.coleman.kingword.dict.DictManager -> com.coleman.kingword.dict.b:
    java.lang.String TAG -> a
    com.coleman.log.Log Log -> b
    com.coleman.kingword.dict.DictManager manager -> c
    java.util.HashMap libmap -> d
    java.lang.String curLib -> e
    java.lang.String moreLib -> f
    com.coleman.kingword.dict.DictManager getInstance() -> a
    boolean isCurLibInitialized() -> b
    void initLibrary(android.content.Context) -> a
    void addLib(com.coleman.kingword.dict.stardict.DictLibrary) -> a
    void setCurLibrary(java.lang.String) -> a
    void setMoreLibrary(java.lang.String) -> b
    java.util.Collection getLibrarys() -> c
    java.lang.String getCurLibDirName() -> d
    java.lang.String getMoreLibDirName() -> e
    com.coleman.kingword.dict.stardict.DictIndex getIndex(android.content.Context,java.lang.String,java.lang.String) -> a
    com.coleman.kingword.dict.stardict.DictData viewWord(android.content.Context,com.coleman.kingword.dict.stardict.DictIndex) -> a
    com.coleman.kingword.dict.stardict.DictData viewMore(android.content.Context,com.coleman.kingword.dict.stardict.DictIndex) -> b
    com.coleman.kingword.dict.stardict.DictData viewMore(android.content.Context,java.lang.String) -> a
com.coleman.kingword.dict.DictManager$LibraryLoader -> com.coleman.kingword.dict.c:
    com.coleman.kingword.dict.DictManager$LibraryLoader mg -> a
    java.lang.String EXT_DIC_PATH -> b
    java.util.HashMap infoMap -> c
    java.util.HashMap idxMap -> d
    java.util.HashSet droplist -> e
    java.util.HashSet createlist -> f
    com.coleman.kingword.dict.DictManager$LibraryLoader getInstance() -> a
    void initTables(android.content.Context) -> b
    void update(android.content.Context) -> a
    void access$0(com.coleman.kingword.dict.DictManager$LibraryLoader,android.content.Context) -> a
com.coleman.kingword.dict.stardict.DictData -> com.coleman.kingword.dict.a.a:
    java.lang.String TAG -> d
    com.coleman.log.Log Log -> e
    java.lang.String symbol -> a
    java.lang.String data -> b
    boolean isDetail -> c
    com.coleman.kingword.dict.stardict.DictData constructData(java.lang.String) -> a
    com.coleman.kingword.dict.stardict.DictData readData(android.content.Context,boolean,com.coleman.kingword.dict.stardict.DictInfo,com.coleman.kingword.dict.stardict.DictIndex,java.lang.String) -> a
    byte[] readData(android.content.Context,boolean,com.coleman.kingword.dict.stardict.DictInfo,java.lang.String,int,int) -> a
    java.lang.String getDatas() -> a
    java.lang.String getSymbol() -> b
    java.lang.String getDataAndSymbol() -> c
    java.lang.String toString() -> toString
com.coleman.kingword.dict.stardict.DictIndex -> com.coleman.kingword.dict.a.b:
    java.lang.String TAG -> d
    com.coleman.log.Log Log -> e
    java.lang.String word -> a
    long offset -> b
    int size -> c
    java.lang.String toString() -> toString
    void loadDictIndexMap(android.content.Context,com.coleman.kingword.dict.stardict.DictLibrary) -> a
    void readIndexFileNative(android.content.Context,com.coleman.kingword.dict.stardict.DictLibrary,java.util.HashMap) -> a
    void doInsert(android.content.Context,java.lang.String,java.util.HashMap) -> a
com.coleman.kingword.dict.stardict.DictInfo -> com.coleman.kingword.dict.a.d:
    java.lang.String TAG -> j
    java.lang.String dictName -> a
    java.lang.String wordCount -> b
    java.lang.String idxFileSize -> c
    java.lang.String sameTypeSequence -> d
    int type -> e
    boolean loaded -> f
    boolean internal -> g
    java.lang.String dictDirName -> h
    long date -> i
    com.coleman.log.Log Log -> k
    java.lang.String toString() -> toString
    void insertOrUpdate(android.content.Context) -> a
    java.util.HashMap loadFromDB(android.content.Context) -> b
    java.util.HashMap loadDefault(android.content.Context) -> c
    com.coleman.kingword.dict.stardict.DictInfo loadFromFile(android.content.Context,boolean,java.lang.String) -> a
    int getType() -> a
com.coleman.kingword.dict.stardict.DictLibrary -> com.coleman.kingword.dict.a.c:
    java.lang.String TAG -> a
    com.coleman.kingword.dict.stardict.DictInfo libraryInfo -> b
    java.lang.String mLibPath -> c
    com.coleman.log.Log Log -> d
    com.coleman.kingword.dict.stardict.DictLibrary loadLibrary(android.content.Context,com.coleman.kingword.dict.stardict.DictInfo) -> a
    com.coleman.kingword.dict.stardict.DictInfo getLibraryInfo() -> a
    boolean isInitialed() -> b
    boolean isInternal() -> c
    boolean isCurLib() -> d
    boolean isMoreLib() -> e
    com.coleman.kingword.dict.stardict.DictIndex getDictIndex(android.content.Context,java.lang.String) -> a
    java.lang.String getLibDirName() -> f
    java.lang.String getLibraryName() -> g
    java.lang.String getIdxFileName() -> h
    int getNumCount() -> i
    void setComplete(android.content.Context) -> a
com.coleman.kingword.ebbinghaus.EbbinghausActivityAsDialog -> com.coleman.kingword.ebbinghaus.EbbinghausActivityAsDialog:
    android.widget.TextView title -> a
    android.widget.TextView msg -> b
    android.widget.Button btn1 -> c
    android.widget.Button btn2 -> d
    byte type -> e
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
com.coleman.kingword.ebbinghaus.EbbinghausReminder -> com.coleman.kingword.ebbinghaus.a:
    java.lang.String TAG -> a
    com.coleman.log.Log Log -> b
    void setNotifactionDelay(android.content.Context,int) -> a
    void removeRepeatNotifaction(android.content.Context,int) -> b
    void resetRepeatNotification() -> a
    void setRepeatNotifaction(android.content.Context,int,java.lang.String) -> a
    void setNotifactionAfterInstalled(android.content.Context) -> a
    void setNotifactionAfterReboot(android.content.Context) -> b
    int needReview(android.content.Context) -> c
com.coleman.kingword.ebbinghaus.receiver.KingWordReceiver -> com.coleman.kingword.ebbinghaus.receiver.KingWordReceiver:
    com.coleman.log.Log Log -> a
    java.lang.String TAG -> b
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void doEbbinghausAction(android.content.Context,android.content.Intent) -> a
com.coleman.kingword.history.WordInfo -> com.coleman.kingword.history.WordInfo:
    com.coleman.log.Log Log -> j
    java.lang.String TAG -> k
    long id -> a
    java.lang.String word -> b
    boolean ignore -> c
    byte studycount -> d
    byte errorcount -> e
    byte weight -> f
    boolean newword -> g
    long review_time -> h
    byte review_type -> i
    android.os.Parcelable$Creator CREATOR -> CREATOR
    boolean inReviewTime() -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    byte getNextReviewType(byte) -> a
    java.lang.String getReviewTypeText(android.content.Context,byte) -> a
    long getTime() -> c
    android.content.ContentValues toContentValues() -> b
com.coleman.kingword.history.WordInfo$1 -> com.coleman.kingword.history.a:
    com.coleman.kingword.history.WordInfo createFromParcel(android.os.Parcel) -> a
    com.coleman.kingword.history.WordInfo[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.coleman.kingword.history.WordInfoHelper -> com.coleman.kingword.history.f:
    java.lang.String[] projection -> a
    java.lang.String TAG -> b
    com.coleman.log.Log Log -> c
    com.coleman.kingword.history.WordInfo getWordInfo(android.content.Context,java.lang.String) -> a
    boolean hasWordInfo(android.content.Context,byte) -> a
    android.database.Cursor queryWordInfo(android.content.Context,byte,android.database.Cursor) -> a
    java.lang.String getReviewSelection() -> a
    java.util.ArrayList getWordInfoList(android.content.Context,byte) -> b
    boolean store(android.content.Context,com.coleman.kingword.history.WordInfo) -> a
    void backupWordInfoDB(android.content.Context,boolean) -> a
    void restoreWordInfoDB(android.content.Context,boolean) -> b
    android.net.Uri insert(android.content.Context,com.coleman.kingword.history.WordInfo) -> b
    int update(android.content.Context,com.coleman.kingword.history.WordInfo) -> c
    com.coleman.log.Log access$0() -> b
    java.lang.String access$1() -> c
    java.lang.String[] access$2() -> d
com.coleman.kingword.history.WordInfoHelper$1 -> com.coleman.kingword.history.e:
    boolean val$toast -> a
    android.content.Context val$context -> b
    void handleMessage(android.os.Message) -> handleMessage
com.coleman.kingword.history.WordInfoHelper$2 -> com.coleman.kingword.history.d:
    android.content.Context val$context -> a
    android.os.Handler val$handler -> b
    void run() -> run
com.coleman.kingword.history.WordInfoHelper$3 -> com.coleman.kingword.history.c:
    boolean val$toast -> a
    android.content.Context val$context -> b
    void handleMessage(android.os.Message) -> handleMessage
com.coleman.kingword.history.WordInfoHelper$4 -> com.coleman.kingword.history.b:
    java.io.DataInputStream val$dis -> a
    java.io.FileInputStream val$fis -> b
    java.io.File val$file -> c
    android.content.Context val$context -> d
    android.os.Handler val$handler -> e
    void run() -> run
com.coleman.kingword.inspirit.countdown.CountdownManager -> com.coleman.kingword.b.a.a:
    java.lang.String TAG -> a
    com.coleman.log.Log Log -> b
    int TOTAL_TIME -> c
    int costTime -> d
    android.os.Handler handler -> e
    void start() -> a
    void pause() -> b
    java.lang.String getRemainderTimeShortFormatted(android.content.Context) -> a
    java.lang.String getMString(int) -> a
    java.lang.String getSString(int) -> b
    void update() -> c
    int getCountDown() -> d
com.coleman.kingword.provider.KingWord -> com.coleman.kingword.provider.g:
    java.util.HashMap maps -> a
com.coleman.kingword.provider.KingWord$TDict -> com.coleman.kingword.provider.e:
    android.net.Uri CONTENT_URI -> a
    java.util.HashMap projectionMap -> b
com.coleman.kingword.provider.KingWord$TDict$TDictIndex -> com.coleman.kingword.provider.f:
    java.lang.String TABLE_NAME -> a
    java.lang.String WORD -> b
    java.lang.String OFFSET -> c
    java.lang.String SIZE -> d
    java.lang.String DEFAULT_SORT_ORDER -> e
    java.lang.String libDirName -> g
    java.util.HashMap projectionMap -> f
    java.lang.String getCreateTableSQL() -> a
    android.net.Uri getContentUri() -> b
    android.net.Uri getContentUri(java.lang.String) -> a
    java.lang.String getLibDirName() -> c
    java.lang.String toString() -> toString
com.coleman.kingword.provider.KingWord$THistory -> com.coleman.kingword.provider.b:
    android.net.Uri CONTENT_URI -> a
    java.util.HashMap projectionMap -> b
com.coleman.kingword.provider.KingWord$TSubWordList -> com.coleman.kingword.provider.d:
    android.net.Uri CONTENT_URI -> a
    java.util.HashMap projectionMap -> b
com.coleman.kingword.provider.KingWord$TWordList -> com.coleman.kingword.provider.a:
    android.net.Uri CONTENT_URI -> a
    java.util.HashMap projectionMap -> b
com.coleman.kingword.provider.KingWord$TWordList$TWordListItem -> com.coleman.kingword.provider.c:
    java.lang.String TABLE_NAME -> a
    java.util.HashMap projectionMap -> b
    java.lang.String getCreateTableSql() -> a
    android.net.Uri getContentUri(long) -> a
com.coleman.kingword.provider.KingWordDBHepler -> com.coleman.kingword.provider.h:
    java.lang.String TAG -> a
    com.coleman.log.Log Log -> b
    com.coleman.kingword.provider.KingWordDBHepler instance -> c
    com.coleman.kingword.provider.KingWordDBHepler getInstance(android.content.Context) -> a
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.coleman.kingword.provider.KingWordProvider -> com.coleman.kingword.provider.KingWordProvider:
    com.coleman.kingword.provider.KingWordDBHepler dbHelper -> a
    java.lang.String TAG -> b
    com.coleman.log.Log Log -> c
    boolean onCreate() -> onCreate
    int bulkInsert(android.net.Uri,android.content.ContentValues[]) -> bulkInsert
    android.net.Uri insert(android.net.Uri,android.content.ContentValues) -> insert
    int delete(android.net.Uri,java.lang.String,java.lang.String[]) -> delete
    android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> query
    java.util.Map getProjectionMap(java.lang.String) -> a
    int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
    java.lang.String getType(android.net.Uri) -> getType
    java.lang.String whereWithId(java.lang.String,java.lang.String) -> a
com.coleman.kingword.provider.upgrade.InternalDBVersionChain -> com.coleman.kingword.provider.a.c:
    com.coleman.kingword.provider.upgrade.InternalDBVersionChain chain -> a
    java.util.HashMap map -> b
    com.coleman.kingword.provider.upgrade.InternalDBVersionChain getInstance() -> a
    void upgrade() -> b
com.coleman.kingword.provider.upgrade.Task -> com.coleman.kingword.provider.a.b:
    void execute() -> a
com.coleman.kingword.provider.upgrade.UpgradeManager -> com.coleman.kingword.provider.a.d:
    java.lang.String TAG -> b
    com.coleman.log.Log Log -> c
    com.coleman.kingword.provider.upgrade.UpgradeManager manager -> d
    java.lang.String failMsg -> e
    com.coleman.kingword.provider.upgrade.UpgradeManager getInstance() -> a
    void setFailMsg(java.lang.String) -> a
    java.lang.String getFailMsg() -> b
    boolean needUpgrade() -> c
    void upgrade() -> d
    com.coleman.log.Log access$0() -> h
com.coleman.kingword.provider.upgrade.UpgradeManager$1 -> com.coleman.kingword.provider.a.a:
    com.coleman.kingword.provider.upgrade.UpgradeManager this$0 -> a
    void run() -> run
com.coleman.kingword.provider.upgrade.version6.KingWord_v6 -> com.coleman.kingword.provider.a.a.c:
    java.util.HashMap maps -> a
com.coleman.kingword.provider.upgrade.version6.KingWord_v6$TWordList -> com.coleman.kingword.provider.a.a.b:
    android.net.Uri CONTENT_URI -> a
    java.util.HashMap projectionMap -> b
com.coleman.kingword.provider.upgrade.version6.Task_v6 -> com.coleman.kingword.provider.a.a.a:
    void execute() -> a
com.coleman.kingword.skin.ColorManager -> com.coleman.kingword.a.b:
    com.coleman.kingword.skin.ColorManager mgr -> a
    int selectMode -> b
    int textColor -> c
    int bgColor -> d
    int selectColor -> e
    com.coleman.kingword.skin.ColorManager getInstance() -> a
    int getTextColor() -> b
    int getBgColor() -> c
    int getSelectMode() -> d
    android.graphics.drawable.StateListDrawable getSelector() -> e
    void init() -> f
    int access$0(com.coleman.kingword.skin.ColorManager) -> a
    int access$1(com.coleman.kingword.skin.ColorManager) -> b
com.coleman.kingword.skin.ColorManager$BGDrawable -> com.coleman.kingword.a.a:
    com.coleman.kingword.skin.ColorManager this$0 -> a
com.coleman.kingword.wordlist.AbsSubVisitor -> com.coleman.kingword.wordlist.ae:
    java.util.ArrayList list -> a
    java.lang.String TAG -> f
    byte type -> b
    com.coleman.log.Log Log -> g
    int p -> c
    int lastMark -> d
    com.coleman.kingword.wordlist.AbsSubVisitor$ViewMethod method -> e
    boolean preload -> h
    java.lang.String pauseLock -> i
    boolean pausePreload -> j
    void loadWordList(android.content.Context) -> a
    int getProgress() -> f
    boolean allComplete() -> g
    java.util.ArrayList getDictData(android.content.Context,com.coleman.kingword.wordlist.WordVisitor) -> a
    com.coleman.kingword.wordlist.WordVisitor getCurrentWord() -> h
    com.coleman.kingword.wordlist.WordVisitor getNext() -> i
    int getCurrentIndex() -> j
    byte getType() -> k
    java.lang.String getViewMethod() -> l
    int getCount() -> m
    int getCountDown() -> d
    com.coleman.kingword.wordlist.WordVisitor getWordVisitor(int) -> a
    void preload() -> n
    void pausePreload() -> o
    void pause() -> a
    void resumePreload() -> p
    void stopPreload() -> q
    boolean access$0(com.coleman.kingword.wordlist.AbsSubVisitor) -> a
    com.coleman.log.Log access$1() -> r
    java.lang.String access$2() -> s
    boolean access$3(com.coleman.kingword.wordlist.AbsSubVisitor) -> b
    void access$4(com.coleman.kingword.wordlist.AbsSubVisitor) -> c
    void access$5(com.coleman.kingword.wordlist.AbsSubVisitor,boolean) -> a
com.coleman.kingword.wordlist.AbsSubVisitor$1 -> com.coleman.kingword.wordlist.c:
    com.coleman.kingword.wordlist.AbsSubVisitor this$0 -> a
    void run() -> run
com.coleman.kingword.wordlist.AbsSubVisitor$ViewMethod -> com.coleman.kingword.wordlist.o:
    int[] stateTypes -> a
    void checkAndSetTypes(int[]) -> a
    com.coleman.kingword.wordlist.FiniteStateMachine$FiniteState[] getStates() -> a
    int[] getStateTypes() -> b
com.coleman.kingword.wordlist.FileExplorer -> com.coleman.kingword.wordlist.FileExplorer:
    java.lang.String TAG -> a
    com.coleman.log.Log Log -> b
    java.util.ArrayList list -> c
    java.io.File root -> d
    android.widget.ListView listView -> e
    com.coleman.kingword.wordlist.FileExplorer$FileAdapter adapter -> f
    android.widget.TextView pathView -> g
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onBackPressed() -> onBackPressed
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void setColorMode() -> c
    void listFiles(java.util.ArrayList,java.io.File) -> a
    void doEdit(java.lang.String) -> a
    void access$0(com.coleman.kingword.wordlist.FileExplorer,java.io.File) -> a
    java.io.File access$1(com.coleman.kingword.wordlist.FileExplorer) -> a
    void access$2(com.coleman.kingword.wordlist.FileExplorer,java.util.ArrayList,java.io.File) -> a
    void access$3(com.coleman.kingword.wordlist.FileExplorer,java.lang.String) -> a
    com.coleman.log.Log access$4() -> a
    java.lang.String access$5() -> b
com.coleman.kingword.wordlist.FileExplorer$1 -> com.coleman.kingword.wordlist.x:
    com.coleman.kingword.wordlist.FileExplorer this$0 -> a
    void onClick(android.view.View) -> onClick
com.coleman.kingword.wordlist.FileExplorer$FileAdapter -> com.coleman.kingword.wordlist.z:
    android.view.LayoutInflater inflater -> b
    java.util.ArrayList list -> c
    com.coleman.kingword.wordlist.FileExplorer this$0 -> a
    int getCount() -> getCount
    java.io.File getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    java.lang.Object getItem(int) -> getItem
com.coleman.kingword.wordlist.FiniteStateMachine -> com.coleman.kingword.wordlist.a:
    com.coleman.kingword.wordlist.FiniteStateMachine$FiniteStateEngine mStateEngine -> b
    boolean isComplete() -> a
    com.coleman.kingword.wordlist.FiniteStateMachine$FiniteState getCurrentState() -> b
    void sendEmptyMessage(int) -> a
    int getCurrentIndex() -> c
    java.util.ArrayList getDictData(android.content.Context,com.coleman.kingword.wordlist.WordVisitor,java.util.ArrayList) -> a
    java.lang.String getViewMethod() -> d
com.coleman.kingword.wordlist.FiniteStateMachine$CompleteState -> com.coleman.kingword.wordlist.n:
com.coleman.kingword.wordlist.FiniteStateMachine$FiniteState -> com.coleman.kingword.wordlist.ag:
    java.util.Random ran -> f
    com.coleman.kingword.wordlist.FiniteStateMachine$FiniteState nextState -> a
    boolean pass -> b
    int index -> c
    java.lang.String viewMethod -> d
    int type -> e
    java.lang.String getViewMethod() -> a
    void enter() -> b
    void exit() -> c
    void reset() -> d
    java.util.ArrayList getDictData(android.content.Context,com.coleman.kingword.wordlist.WordVisitor,java.util.ArrayList) -> a
    void shuffle(java.util.ArrayList) -> a
    void addRandomDictData(android.content.Context,java.util.ArrayList,java.util.ArrayList) -> a
com.coleman.kingword.wordlist.FiniteStateMachine$FiniteStateEngine -> com.coleman.kingword.wordlist.t:
    java.util.ArrayList mStateList -> a
    com.coleman.kingword.wordlist.FiniteStateMachine$FiniteState mCurrentState -> b
    boolean isComplete() -> a
    void addState(com.coleman.kingword.wordlist.FiniteStateMachine$FiniteState) -> a
    com.coleman.kingword.wordlist.FiniteStateMachine$FiniteState getCurrentState() -> b
    void handleMessage(android.os.Message) -> a
    void transitionTo(com.coleman.kingword.wordlist.FiniteStateMachine$FiniteState) -> b
    void reset() -> c
    void setInitialState(int) -> a
    void complete() -> d
com.coleman.kingword.wordlist.FiniteStateMachine$InitState -> com.coleman.kingword.wordlist.ai:
    java.util.ArrayList getDictData(android.content.Context,com.coleman.kingword.wordlist.WordVisitor,java.util.ArrayList) -> a
com.coleman.kingword.wordlist.FiniteStateMachine$MultipleState -> com.coleman.kingword.wordlist.s:
    java.util.ArrayList getDictData(android.content.Context,com.coleman.kingword.wordlist.WordVisitor,java.util.ArrayList) -> a
com.coleman.kingword.wordlist.IgnoreListVisitor -> com.coleman.kingword.wordlist.ad:
    java.lang.String TAG -> f
    com.coleman.log.Log Log -> g
    void loadWordList(android.content.Context) -> a
com.coleman.kingword.wordlist.NewListVisitor -> com.coleman.kingword.wordlist.y:
    java.lang.String TAG -> f
    com.coleman.log.Log Log -> g
    void loadWordList(android.content.Context) -> a
com.coleman.kingword.wordlist.OriginalDownloadReceiver -> com.coleman.kingword.wordlist.OriginalDownloadReceiver:
    java.lang.String TAG -> a
    com.coleman.log.Log Log -> b
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.coleman.kingword.wordlist.OriginalDownloadReceiver$1 -> com.coleman.kingword.wordlist.af:
    com.coleman.kingword.wordlist.OriginalDownloadReceiver this$0 -> a
    java.lang.String val$path -> b
    android.content.Context val$context -> c
    void run() -> run
com.coleman.kingword.wordlist.RemoteFileExplorer -> com.coleman.kingword.wordlist.RemoteFileExplorer:
    java.lang.String TAG -> a
    com.coleman.log.Log Log -> b
    android.widget.ListView lv -> c
    com.coleman.ojm.bean.RFile root -> d
    android.widget.TextView pathView -> e
    android.widget.ProgressBar pb -> f
    com.coleman.kingword.wordlist.RemoteFileExplorer$RFileAdapter rAdapter -> g
    java.util.Comparator comparator -> h
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void getWordlist(com.coleman.ojm.core.Observer) -> a
    void onBackPressed() -> onBackPressed
    void update(java.lang.Object) -> a
    void setColorMode() -> c
    com.coleman.ojm.bean.RFile getParentFile(com.coleman.ojm.bean.RFile,com.coleman.ojm.bean.RFile) -> a
    void listFiles(java.util.List,com.coleman.ojm.bean.RFile) -> a
    void showFilePath(com.coleman.ojm.bean.RFile) -> a
    com.coleman.ojm.bean.RFile access$0(com.coleman.kingword.wordlist.RemoteFileExplorer) -> a
    java.util.Comparator access$1(com.coleman.kingword.wordlist.RemoteFileExplorer) -> b
    void access$2(com.coleman.kingword.wordlist.RemoteFileExplorer,com.coleman.ojm.bean.RFile) -> a
    void access$3(com.coleman.kingword.wordlist.RemoteFileExplorer,java.util.List,com.coleman.ojm.bean.RFile) -> a
    com.coleman.log.Log access$4() -> a
    java.lang.String access$5() -> b
com.coleman.kingword.wordlist.RemoteFileExplorer$1 -> com.coleman.kingword.wordlist.i:
    com.coleman.kingword.wordlist.RemoteFileExplorer this$0 -> a
    int compare(com.coleman.ojm.bean.RFile,com.coleman.ojm.bean.RFile) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.coleman.kingword.wordlist.RemoteFileExplorer$2 -> com.coleman.kingword.wordlist.g:
    com.coleman.kingword.wordlist.RemoteFileExplorer this$0 -> a
    void onClick(android.view.View) -> onClick
com.coleman.kingword.wordlist.RemoteFileExplorer$RFileAdapter -> com.coleman.kingword.wordlist.b:
    android.view.LayoutInflater inflater -> b
    com.coleman.ojm.bean.RFile subRoot -> c
    java.util.ArrayList list -> d
    com.coleman.kingword.wordlist.RemoteFileExplorer this$0 -> a
    int getCount() -> getCount
    com.coleman.ojm.bean.RFile getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void showDownloadTip(com.coleman.ojm.bean.RFile) -> a
    void doDownload(com.coleman.ojm.bean.RFile) -> b
    java.lang.Object getItem(int) -> getItem
    void access$1(com.coleman.kingword.wordlist.RemoteFileExplorer$RFileAdapter,com.coleman.ojm.bean.RFile) -> a
    com.coleman.ojm.bean.RFile access$2(com.coleman.kingword.wordlist.RemoteFileExplorer$RFileAdapter) -> a
    void access$3(com.coleman.kingword.wordlist.RemoteFileExplorer$RFileAdapter,com.coleman.ojm.bean.RFile) -> b
    java.util.ArrayList access$4(com.coleman.kingword.wordlist.RemoteFileExplorer$RFileAdapter) -> b
com.coleman.kingword.wordlist.RemoteFileExplorer$RFileAdapter$1 -> com.coleman.kingword.wordlist.ak:
    com.coleman.kingword.wordlist.RemoteFileExplorer$RFileAdapter this$1 -> a
    com.coleman.ojm.bean.RFile val$item -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.coleman.kingword.wordlist.ReviewListVisitor -> com.coleman.kingword.wordlist.aj:
    java.lang.String TAG -> f
    com.coleman.log.Log Log -> g
    void loadWordList(android.content.Context) -> a
com.coleman.kingword.wordlist.SubListActivity -> com.coleman.kingword.wordlist.SubListActivity:
    com.coleman.kingword.wordlist.view.ScrollLayout mScrollLayout -> a
    com.coleman.kingword.wordlist.view.PageBottomBar mPageBottomBar -> b
    long wordlist_id -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void setColorMode() -> a
    void initQuery(long) -> a
    com.coleman.kingword.wordlist.view.ScrollLayout access$0(com.coleman.kingword.wordlist.SubListActivity) -> a
    com.coleman.kingword.wordlist.view.PageBottomBar access$1(com.coleman.kingword.wordlist.SubListActivity) -> b
com.coleman.kingword.wordlist.SubListActivity$PageAdapter -> com.coleman.kingword.wordlist.v:
    java.util.List list -> b
    int[] historyRateLev -> c
    int[] historyPaperLev -> d
    com.coleman.kingword.wordlist.SubListActivity this$0 -> a
    int getCount() -> getCount
    com.coleman.kingword.wordlist.model.SubWordList getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
com.coleman.kingword.wordlist.SubListActivity$PageControl -> com.coleman.kingword.wordlist.m:
    java.lang.String TAG -> a
    com.coleman.log.Log Log -> b
    int pageItems -> d
    int pages -> e
    java.util.ArrayList list -> f
    com.coleman.kingword.wordlist.SubListActivity this$0 -> c
    void compute() -> a
    com.coleman.kingword.wordlist.SubListActivity access$0(com.coleman.kingword.wordlist.SubListActivity$PageControl) -> a
com.coleman.kingword.wordlist.SubListActivity$PageControl$1 -> com.coleman.kingword.wordlist.p:
    com.coleman.kingword.wordlist.SubListActivity$PageControl this$1 -> a
    int val$si -> b
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.coleman.kingword.wordlist.SubListVisitor -> com.coleman.kingword.wordlist.w:
    java.lang.String TAG -> f
    com.coleman.log.Log Log -> g
    com.coleman.kingword.wordlist.model.SubWordList subinfo -> h
    void setSubInfo(com.coleman.kingword.wordlist.model.SubWordList) -> a
    void loadWordList(android.content.Context) -> a
    void clearAllWordItemStates(android.content.Context) -> b
    void errorPlus() -> a
    long getWordListID() -> b
    com.coleman.kingword.wordlist.model.SubWordList getSubList() -> c
    void update(android.content.Context) -> c
    int getCountDown() -> d
    int getStudyRate() -> t
    java.lang.String getSubListLevelString(android.content.Context) -> d
    int getCorrectPercentage() -> e
    java.lang.String getLevelStrings(android.content.Context,int) -> a
com.coleman.kingword.wordlist.TextEditor -> com.coleman.kingword.wordlist.TextEditor:
    com.coleman.log.Log Log -> a
    android.widget.EditText editText -> b
    java.lang.String path -> c
    android.widget.Button btnSave -> d
    void onCreate(android.os.Bundle) -> onCreate
    void onBackPressed() -> onBackPressed
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onClick(android.view.View) -> onClick
    void onDestroy() -> onDestroy
    void doSave() -> a
    java.lang.String access$0(com.coleman.kingword.wordlist.TextEditor) -> a
    android.widget.EditText access$1(com.coleman.kingword.wordlist.TextEditor) -> b
com.coleman.kingword.wordlist.TextEditor$ExpensiveTask -> com.coleman.kingword.wordlist.aa:
    byte type -> b
    java.lang.String content -> c
    com.coleman.kingword.wordlist.TextEditor this$0 -> a
    void onPreExecute() -> onPreExecute
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.coleman.kingword.wordlist.TextEditor$FileLoader -> com.coleman.kingword.wordlist.d:
    java.lang.String content -> b
    com.coleman.kingword.wordlist.TextEditor this$0 -> a
    java.lang.String getContent() -> a
com.coleman.kingword.wordlist.WordListActivity -> com.coleman.kingword.wordlist.WordListActivity:
    java.lang.String TAG -> a
    com.coleman.log.Log Log -> b
    com.coleman.kingword.wordlist.WordListActivity$WordListAdapter adapter -> c
    android.database.Cursor c -> d
    java.lang.String[] projection -> e
    java.lang.String external_file_path -> f
    android.widget.ListView listView -> g
    android.widget.ProgressBar progressBar -> h
    android.view.View emptyView -> i
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onResume() -> onResume
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
    void onDestroy() -> onDestroy
    void setColorMode() -> d
    void showDBInitHint() -> e
    void showDeleteDialog(long,java.lang.String) -> a
    void showRenameDialog(long) -> a
    android.widget.ListView access$0(com.coleman.kingword.wordlist.WordListActivity) -> a
    android.widget.ProgressBar access$1(com.coleman.kingword.wordlist.WordListActivity) -> b
    android.view.View access$2(com.coleman.kingword.wordlist.WordListActivity) -> c
    java.lang.String[] access$3() -> a
    void access$4(com.coleman.kingword.wordlist.WordListActivity,android.database.Cursor) -> a
    android.database.Cursor access$5(com.coleman.kingword.wordlist.WordListActivity) -> d
    com.coleman.log.Log access$6() -> b
    java.lang.String access$7() -> c
    java.lang.String access$8(com.coleman.kingword.wordlist.WordListActivity) -> e
    void access$9(com.coleman.kingword.wordlist.WordListActivity,com.coleman.kingword.wordlist.WordListActivity$WordListAdapter) -> a
    com.coleman.kingword.wordlist.WordListActivity$WordListAdapter access$10(com.coleman.kingword.wordlist.WordListActivity) -> f
com.coleman.kingword.wordlist.WordListActivity$1 -> com.coleman.kingword.wordlist.q:
    com.coleman.kingword.wordlist.WordListActivity this$0 -> a
    long val$id -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.coleman.kingword.wordlist.WordListActivity$2 -> com.coleman.kingword.wordlist.r:
    com.coleman.kingword.wordlist.WordListActivity this$0 -> a
    android.widget.EditText val$et -> b
    long val$id -> c
    void onClick(android.content.DialogInterface,int) -> onClick
com.coleman.kingword.wordlist.WordListActivity$ExpensiveTask -> com.coleman.kingword.wordlist.ah:
    byte type -> b
    com.coleman.kingword.wordlist.WordListActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onProgressUpdate(java.lang.Integer[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void onProgressUpdate(java.lang.Object[]) -> onProgressUpdate
    void access$3(com.coleman.kingword.wordlist.WordListActivity$ExpensiveTask,java.lang.Object[]) -> a
com.coleman.kingword.wordlist.WordListActivity$ExpensiveTask$1 -> com.coleman.kingword.wordlist.j:
    com.coleman.kingword.wordlist.WordListActivity$ExpensiveTask this$1 -> a
    void notify(int) -> a
com.coleman.kingword.wordlist.WordListActivity$ExpensiveTask$2 -> com.coleman.kingword.wordlist.k:
    com.coleman.kingword.wordlist.WordListActivity$ExpensiveTask this$1 -> a
    void notify(int) -> a
com.coleman.kingword.wordlist.WordListActivity$WordListAdapter -> com.coleman.kingword.wordlist.ab:
    com.coleman.kingword.wordlist.WordListActivity this$0 -> a
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> bindView
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> newView
    java.lang.String getName(java.lang.String) -> a
com.coleman.kingword.wordlist.WordListManager -> com.coleman.kingword.wordlist.u:
    java.lang.String TAG -> a
    com.coleman.log.Log Log -> b
    com.coleman.kingword.wordlist.WordListManager manager -> c
    int[] $SWITCH_TABLE$com$coleman$kingword$wordlist$model$WordList$SetMethod -> d
    com.coleman.kingword.wordlist.WordListManager getInstance() -> a
    void loadWordListFromAsset(android.content.Context,java.lang.String,com.coleman.kingword.wordlist.WordListManager$IProgressNotifier) -> a
    void loadWordListFromFile(android.content.Context,java.lang.String,com.coleman.kingword.wordlist.WordListManager$IProgressNotifier) -> b
    boolean isExist(android.content.Context,java.lang.String) -> a
    void loadWordList(android.content.Context,java.lang.String,com.coleman.kingword.wordlist.WordListManager$IProgressNotifier) -> c
    void insertWordList(android.content.Context,com.coleman.kingword.wordlist.model.WordList,com.coleman.kingword.wordlist.WordListManager$IProgressNotifier) -> a
    void splitAndInsertSubWordList(android.content.Context,java.util.ArrayList,com.coleman.kingword.wordlist.model.WordList,com.coleman.kingword.wordlist.WordListManager$IProgressNotifier) -> a
    void doInsertSubWordList(android.content.Context,com.coleman.kingword.wordlist.model.SubWordList) -> a
    void doInsertWords(android.content.Context,com.coleman.kingword.wordlist.model.SubWordList,java.util.List) -> a
    void update(android.content.Context,long) -> a
    void sort(java.util.ArrayList) -> a
    com.coleman.log.Log access$0() -> b
    java.lang.String access$1() -> c
    int[] $SWITCH_TABLE$com$coleman$kingword$wordlist$model$WordList$SetMethod() -> d
com.coleman.kingword.wordlist.WordListManager$1 -> com.coleman.kingword.wordlist.h:
    com.coleman.kingword.wordlist.WordListManager this$0 -> a
    void notify(int) -> a
com.coleman.kingword.wordlist.WordListManager$2 -> com.coleman.kingword.wordlist.f:
    com.coleman.kingword.wordlist.WordListManager this$0 -> a
    void notify(int) -> a
com.coleman.kingword.wordlist.WordListManager$3 -> com.coleman.kingword.wordlist.e:
    com.coleman.kingword.wordlist.WordListManager this$0 -> a
    int compare(java.lang.String,java.lang.String) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.coleman.kingword.wordlist.WordListManager$IProgressNotifier -> com.coleman.kingword.wordlist.l:
    void notify(int) -> a
com.coleman.kingword.wordlist.WordVisitor -> com.coleman.kingword.wordlist.ac:
    java.lang.String TAG -> d
    com.coleman.log.Log Log -> e
    com.coleman.kingword.wordlist.model.WordListItem item -> a
    com.coleman.kingword.history.WordInfo info -> b
    com.coleman.kingword.dict.stardict.DictIndex dictIndex -> c
    com.coleman.kingword.dict.stardict.DictData dictData -> f
    com.coleman.kingword.dict.stardict.DictData detailData -> g
    com.coleman.kingword.wordlist.FiniteStateMachine mStateMachine -> h
    com.coleman.kingword.wordlist.AbsSubVisitor absSubVisitor -> i
    java.lang.String getWord(android.content.Context) -> a
    com.coleman.kingword.wordlist.FiniteStateMachine$FiniteState getCurrentStatus() -> a
    int getStudyIndex() -> b
    boolean isComplete() -> c
    boolean showSymbol() -> d
    boolean isAddToNew() -> e
    void setPass(boolean) -> a
    void preload(android.content.Context) -> b
    com.coleman.kingword.dict.stardict.DictData getDictData(android.content.Context) -> c
    com.coleman.kingword.dict.stardict.DictData getData() -> f
    com.coleman.kingword.dict.stardict.DictData getDetail(android.content.Context) -> d
    void loadInfo(android.content.Context) -> e
    boolean addNew(android.content.Context) -> f
    boolean removeFromNew(android.content.Context) -> g
    boolean upgrade(android.content.Context) -> h
    boolean degrade(android.content.Context) -> i
    boolean ignore(android.content.Context) -> j
    void viewPlus(android.content.Context) -> k
    void errorPlus(android.content.Context) -> l
    java.lang.String toString() -> toString
    java.util.ArrayList getDictData(android.content.Context,java.util.ArrayList) -> a
    boolean isIgnore() -> g
    boolean removeIgnore(android.content.Context) -> m
    boolean isNewWord() -> h
    void clear() -> i
    java.lang.String getViewMethod() -> j
    void update(java.lang.Object) -> a
    void updateWordListItemState() -> k
com.coleman.kingword.wordlist.WordlistTabActivity -> com.coleman.kingword.wordlist.WordlistTabActivity:
    java.lang.String TAG -> a
    android.widget.Button btnNew -> b
    android.widget.Button btnIgnore -> c
    android.widget.Button btnReview -> d
    com.coleman.log.Log Log -> e
    android.widget.TabHost mTabHost -> f
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onTabChanged(java.lang.String) -> onTabChanged
    void onClick(android.view.View) -> onClick
    void setColorMode() -> a
    void setupLoadRemoteWordList() -> b
    void setupLoadLocalWordList() -> c
    void setupLoadedList(android.content.Intent) -> a
    void setCurrentTab(android.content.Intent) -> b
    void showDBInitHint() -> d
com.coleman.kingword.wordlist.model.SubWordList -> com.coleman.kingword.wordlist.model.SubWordList:
    long id -> a
    long word_list_id -> b
    int count_down -> c
    int history_level -> d
    int level -> e
    java.lang.String method -> f
    int position -> g
    int progress -> h
    int error_count -> i
    int index -> j
    int screenIndex -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.content.ContentValues toContentValues() -> a
    java.lang.String toString() -> toString
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.coleman.kingword.wordlist.model.SubWordList$1 -> com.coleman.kingword.wordlist.model.d:
    com.coleman.kingword.wordlist.model.SubWordList createFromParcel(android.os.Parcel) -> a
    com.coleman.kingword.wordlist.model.SubWordList[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.coleman.kingword.wordlist.model.WordList -> com.coleman.kingword.wordlist.model.c:
    java.lang.String TAG -> e
    long id -> a
    java.lang.String describe -> b
    java.lang.String path_name -> c
    com.coleman.kingword.wordlist.model.WordList$SetMethod set_method -> d
    android.content.ContentValues toContentValues() -> a
com.coleman.kingword.wordlist.model.WordList$SetMethod -> com.coleman.kingword.wordlist.model.a:
    com.coleman.kingword.wordlist.model.WordList$SetMethod DEFAULT_DEVIDE -> a
    com.coleman.kingword.wordlist.model.WordList$SetMethod AVARAGE_DEVIDE -> b
    com.coleman.kingword.wordlist.model.WordList$SetMethod CHARACTER_DEVIDER -> c
    int value -> d
    com.coleman.kingword.wordlist.model.WordList$SetMethod[] ENUM$VALUES -> e
    int getValue() -> a
    com.coleman.kingword.wordlist.model.WordList$SetMethod[] values() -> values
    com.coleman.kingword.wordlist.model.WordList$SetMethod valueOf(java.lang.String) -> valueOf
com.coleman.kingword.wordlist.model.WordListItem -> com.coleman.kingword.wordlist.model.b:
    long id -> a
    long sub_wordlist_id -> b
    java.lang.String word -> c
    int state -> d
    android.content.ContentValues toContentValues() -> a
com.coleman.kingword.wordlist.view.PageBottomBar -> com.coleman.kingword.wordlist.view.PageBottomBar:
    java.lang.String TAG -> a
    int mCurScreen -> b
    com.coleman.log.Log Log -> c
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onMeasure(int,int) -> onMeasure
    void setCurScreenIndex(int) -> a
com.coleman.kingword.wordlist.view.ScrollLayout -> com.coleman.kingword.wordlist.view.ScrollLayout:
    android.view.VelocityTracker mVelocityTracker -> a
    java.lang.String TAG -> b
    android.widget.Scroller mScroller -> c
    int mCurScreen -> d
    float mLastMotionX -> e
    float downX -> f
    float downY -> g
    boolean moveEvent -> h
    com.coleman.kingword.wordlist.view.PageBottomBar btmBar -> i
    com.coleman.log.Log Log -> j
    com.coleman.kingword.wordlist.view.ScrollLayout$OnViewChangeListener mOnViewChangeListener -> k
    void init(android.content.Context) -> a
    void setCurrentScreen(int) -> a
    void setBottomBar(com.coleman.kingword.wordlist.view.PageBottomBar) -> a
    boolean moveEvent() -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onMeasure(int,int) -> onMeasure
    void snapToDestination() -> b
    void snapToScreen(int) -> b
    void computeScroll() -> computeScroll
    boolean dispatchTouchEvent(android.view.MotionEvent) -> dispatchTouchEvent
    boolean onTouchEvent2(android.view.MotionEvent) -> a
com.coleman.kingword.wordlist.view.ScrollLayout$OnViewChangeListener -> com.coleman.kingword.wordlist.view.a:
    void OnViewChange(int) -> a
com.coleman.log.Log -> com.coleman.a.e:
    void v(java.lang.String,java.lang.Object) -> a
    void d(java.lang.String,java.lang.Object) -> b
    void i(java.lang.String,java.lang.Object) -> c
    void w(java.lang.String,java.lang.Object) -> d
    void e(java.lang.String,java.lang.Object) -> e
    void setLevel(com.coleman.log.Log$Level) -> a
    void setPrintable(boolean) -> a
com.coleman.log.Log$Level -> com.coleman.a.f:
    com.coleman.log.Log$Level verbose -> a
    com.coleman.log.Log$Level debug -> b
    com.coleman.log.Log$Level info -> c
    com.coleman.log.Log$Level warning -> d
    com.coleman.log.Log$Level error -> e
    com.coleman.log.Log$Level off -> f
    int value -> g
    com.coleman.log.Log$Level[] ENUM$VALUES -> h
    com.coleman.log.Log$Level getLevel(int) -> a
    com.coleman.log.Log$Level[] values() -> values
    com.coleman.log.Log$Level valueOf(java.lang.String) -> valueOf
com.coleman.log.LogFactory -> com.coleman.a.a:
    com.coleman.log.Log getDefaultLog(java.lang.String) -> a
com.coleman.log.LogFactory$Creator -> com.coleman.a.c:
    com.coleman.log.LogFactory getJavaLogFactory() -> a
com.coleman.log.LogImpl -> com.coleman.a.b:
    com.coleman.log.Log$Level level -> a
    void v(java.lang.String,java.lang.Object) -> a
    void d(java.lang.String,java.lang.Object) -> b
    void i(java.lang.String,java.lang.Object) -> c
    void w(java.lang.String,java.lang.Object) -> d
    void e(java.lang.String,java.lang.Object) -> e
    void setLevel(com.coleman.log.Log$Level) -> a
    void log(java.lang.String,com.coleman.log.Log$Level,java.lang.Object) -> a
com.coleman.log.LogPool -> com.coleman.a.d:
    java.util.HashMap map -> a
    com.coleman.log.LogPool pool -> b
    com.coleman.log.LogPool getInstance() -> a
    com.coleman.log.Log getLog(java.lang.String) -> a
    void addLog(java.lang.String,com.coleman.log.Log) -> a
com.coleman.log.jdk.JavaLogFactory -> com.coleman.a.a.a:
    com.coleman.log.Log getDefaultLog(java.lang.String) -> a
com.coleman.log.jdk.JavaLogFormatter -> com.coleman.a.a.c:
    java.util.Date dat -> a
    java.text.SimpleDateFormat format -> b
    java.lang.String lineSeparator -> c
    java.lang.String format(java.util.logging.LogRecord) -> format
com.coleman.log.jdk.JavaLogImpl -> com.coleman.a.a.b:
    java.lang.String key -> b
    boolean printed -> c
    int[] $SWITCH_TABLE$com$coleman$log$Log$Level -> d
    void log(java.lang.String,com.coleman.log.Log$Level,java.lang.Object) -> a
    void setLevel(com.coleman.log.Log$Level) -> a
    void setPrintable(boolean) -> a
    java.util.logging.Level getJavaLevel(com.coleman.log.Log$Level) -> b
    int[] $SWITCH_TABLE$com$coleman$log$Log$Level() -> a
com.coleman.ojm.annotation.KeyName -> com.coleman.ojm.annotation.KeyName:
    java.lang.String abbr() -> abbr
    boolean need() -> need
    java.lang.Class genericType() -> genericType
    boolean question() -> question
com.coleman.ojm.annotation.RequestObject -> com.coleman.ojm.annotation.RequestObject:
    java.lang.String url() -> url
    java.lang.String path() -> path
    java.lang.String hwUrl() -> hwUrl
com.coleman.ojm.annotation.ResponseObject -> com.coleman.ojm.annotation.ResponseObject:
com.coleman.ojm.annotation.ValueObject -> com.coleman.ojm.annotation.ValueObject:
com.coleman.ojm.bean.BasicResponse -> com.coleman.ojm.bean.BasicResponse:
    java.lang.Integer getResultCode() -> getResultCode
    void setResultCode(java.lang.Integer) -> setResultCode
    java.lang.String getDescription() -> getDescription
    void setDescription(java.lang.String) -> setDescription
com.coleman.ojm.bean.LoginReq -> com.coleman.ojm.bean.LoginReq:
    java.lang.String userName -> userName
    java.lang.String password -> password
    java.lang.String model -> model
    java.lang.String phoneNumber -> phoneNumber
    java.lang.Long installedTime -> installedTime
    java.lang.Integer startTimes -> startTimes
    java.lang.String currentLevel -> currentLevel
    java.lang.String IMEI -> IMEI
    java.lang.String version -> version
    java.lang.String device -> device
    java.lang.String getUserName() -> getUserName
    void setUserName(java.lang.String) -> setUserName
    java.lang.String getPassword() -> getPassword
    void setPassword(java.lang.String) -> setPassword
    java.lang.String getModel() -> getModel
    void setModel(java.lang.String) -> setModel
    java.lang.String getPhoneNumber() -> getPhoneNumber
    void setPhoneNumber(java.lang.String) -> setPhoneNumber
    java.lang.Long getInstalledTime() -> getInstalledTime
    void setInstalledTime(java.lang.Long) -> setInstalledTime
    java.lang.Integer getStartTimes() -> getStartTimes
    void setStartTimes(java.lang.Integer) -> setStartTimes
    java.lang.String getCurrentLevel() -> getCurrentLevel
    void setCurrentLevel(java.lang.String) -> setCurrentLevel
    java.lang.String getIMEI() -> getIMEI
    void setIMEI(java.lang.String) -> setIMEI
    java.lang.String getVersion() -> getVersion
    void setVersion(java.lang.String) -> setVersion
    java.lang.String getDevice() -> getDevice
    void setDevice(java.lang.String) -> setDevice
com.coleman.ojm.bean.LoginResp -> com.coleman.ojm.bean.LoginResp:
    java.lang.Integer resultCode -> resultCode
    java.lang.String Description -> Description
    java.lang.Integer getResultCode() -> getResultCode
    void setResultCode(java.lang.Integer) -> setResultCode
    java.lang.String getDescription() -> getDescription
    void setDescription(java.lang.String) -> setDescription
com.coleman.ojm.bean.RFile -> com.coleman.ojm.bean.RFile:
    java.lang.Boolean isRoot -> isRoot
    java.lang.Boolean isFolder -> isFolder
    com.coleman.ojm.bean.RFile[] chirldren -> chirldren
    java.lang.String name -> name
    java.lang.String id -> id
    java.lang.String path -> path
    java.lang.Boolean getIsRoot() -> getIsRoot
    void setIsRoot(java.lang.Boolean) -> setIsRoot
    java.lang.Boolean getIsFolder() -> getIsFolder
    void setIsFolder(java.lang.Boolean) -> setIsFolder
    com.coleman.ojm.bean.RFile[] getChirldren() -> getChirldren
    void setChirldren(com.coleman.ojm.bean.RFile[]) -> setChirldren
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getId() -> getId
    void setId(java.lang.String) -> setId
    java.lang.String getPath() -> getPath
    void setPath(java.lang.String) -> setPath
com.coleman.ojm.bean.VersionCheckReq -> com.coleman.ojm.bean.VersionCheckReq:
    java.lang.Integer versionCode -> versionCode
    java.lang.String versionType -> versionType
    java.lang.Integer getVersionCode() -> getVersionCode
    void setVersionCode(java.lang.Integer) -> setVersionCode
    java.lang.String getVersionType() -> getVersionType
    void setVersionType(java.lang.String) -> setVersionType
com.coleman.ojm.bean.VersionCheckResp -> com.coleman.ojm.bean.VersionCheckResp:
    java.lang.Integer resultCode -> resultCode
    java.lang.Integer newVersionCode -> newVersionCode
    java.lang.String Description -> Description
    java.lang.String downloadFileName -> downloadFileName
    java.lang.String thirdpartDownloadUrl -> thirdpartDownloadUrl
    java.lang.Integer getNewVersionCode() -> getNewVersionCode
    void setNewVersionCode(java.lang.Integer) -> setNewVersionCode
    java.lang.String getDescription() -> getDescription
    void setDescription(java.lang.String) -> setDescription
    java.lang.String getDownloadFileName() -> getDownloadFileName
    void setDownloadFile(java.lang.String) -> setDownloadFile
    void setResultCode(java.lang.Integer) -> setResultCode
    java.lang.Integer getResultCode() -> getResultCode
    void setThirdpartDownloadUrl(java.lang.String) -> setThirdpartDownloadUrl
    java.lang.String getThirdpartDownloadUrl() -> getThirdpartDownloadUrl
com.coleman.ojm.bean.WordlistReq -> com.coleman.ojm.bean.WordlistReq:
    java.lang.Integer type -> type
    void setType(java.lang.Integer) -> setType
    java.lang.Integer getType() -> getType
com.coleman.ojm.bean.WordlistResp -> com.coleman.ojm.bean.WordlistResp:
    java.lang.Integer resultCode -> resultCode
    java.lang.String Description -> Description
    com.coleman.ojm.bean.RFile rfile -> rfile
    java.lang.Integer getResultCode() -> getResultCode
    void setResultCode(java.lang.Integer) -> setResultCode
    java.lang.String getDescription() -> getDescription
    void setDescription(java.lang.String) -> setDescription
    com.coleman.ojm.bean.RFile getRfile() -> getRfile
    void setRfile(com.coleman.ojm.bean.RFile) -> setRfile
com.coleman.ojm.bussiness.WorkManager -> com.coleman.ojm.d.a:
    com.coleman.ojm.bussiness.WorkManager manager -> a
    com.coleman.ojm.bussiness.WorkManager getInstance() -> a
    com.coleman.ojm.http.SLResponse versionUpgrade(com.coleman.ojm.http.SLRequest) -> a
    com.coleman.ojm.http.SLResponse getWordlist(com.coleman.ojm.http.SLRequest) -> b
    com.coleman.ojm.http.SLResponse login(com.coleman.ojm.http.SLRequest) -> c
com.coleman.ojm.core.Observable -> com.coleman.ojm.b.b:
    java.lang.String TAG -> b
    com.coleman.log.Log Log -> c
    java.util.ArrayList observers -> d
    boolean changed -> a
    void addObserver(com.coleman.ojm.core.Observer) -> a
    void addObservers(java.util.Collection) -> a
    void clearChanged() -> e
    void deleteObserver(com.coleman.ojm.core.Observer) -> b
    boolean hasChanged() -> f
    void notifyObservers(java.lang.Object) -> a
    void setChanged() -> g
com.coleman.ojm.core.Observable$1 -> com.coleman.ojm.b.e:
    com.coleman.ojm.core.Observable this$0 -> a
    com.coleman.ojm.core.Observer val$observer -> b
    java.lang.Object val$data -> c
    void run() -> run
com.coleman.ojm.core.Observable$2 -> com.coleman.ojm.b.f:
    com.coleman.ojm.core.Observable this$0 -> a
    com.coleman.ojm.core.Observer val$observer -> b
    java.lang.Object val$data -> c
    void run() -> run
com.coleman.ojm.core.Observer -> com.coleman.ojm.b.g:
    void update(java.lang.Object) -> a
com.coleman.ojm.core.SLParser -> com.coleman.ojm.b.d:
    com.coleman.log.Log Log -> a
    void parse(com.coleman.ojm.http.SLResponse,org.json.JSONObject) -> a
    com.coleman.log.Log access$0() -> a
com.coleman.ojm.core.SLParser$JSONParser -> com.coleman.ojm.b.c:
    void parse(java.lang.Object,org.json.JSONObject) -> a
    java.lang.Object makeTypeSafeValue(java.lang.Class,java.lang.String) -> a
    void makeArrayNotNull(java.lang.Class,java.lang.reflect.Field,java.lang.Object) -> a
    java.lang.Object parseJSONArrayToArray(java.lang.Class,org.json.JSONArray) -> a
    java.util.List parseJSONArrayToList(java.lang.Class,org.json.JSONArray) -> b
com.coleman.ojm.core.SLTypeChecker -> com.coleman.ojm.b.h:
    boolean isSimpleType(java.lang.Class) -> a
    boolean isVOType(java.lang.Class) -> b
    boolean isWrappedPrimitive(java.lang.Class) -> c
com.coleman.ojm.core.SLWrapper -> com.coleman.ojm.b.i:
    com.coleman.log.Log Log -> b
    java.text.SimpleDateFormat format -> a
    org.json.JSONObject wrap(com.coleman.ojm.http.SLRequest) -> a
    com.coleman.log.Log access$0() -> a
com.coleman.ojm.core.SLWrapper$JSONWrapper -> com.coleman.ojm.b.a:
    org.json.JSONObject wrap(java.lang.Object) -> a
    boolean isFieldInit(java.lang.reflect.Field,java.lang.Object) -> a
    org.json.JSONArray convertArrayToJSONArray(java.lang.Object) -> b
    org.json.JSONArray convertListToJSONArray(java.util.List) -> a
com.coleman.ojm.exception.FieldNotInitException -> com.coleman.ojm.c.a:
com.coleman.ojm.exception.UnknownTypeException -> com.coleman.ojm.c.b:
com.coleman.ojm.http.HttpHandler -> com.coleman.ojm.a.c:
    java.util.LinkedList cancelableList -> a
    java.util.LinkedList backgroundList -> b
    com.coleman.ojm.http.SLResponse mSLResponse -> c
    com.coleman.log.Log Log -> d
    void cancelForegroundRequests() -> a
    void sendRequest(com.coleman.ojm.http.SLRequest) -> a
    void setResponse(com.coleman.ojm.http.SLResponse) -> a
    void sendRequest(com.coleman.ojm.http.SLRequest,boolean) -> a
    void postRequest(java.io.OutputStream,com.coleman.ojm.http.SLRequest) -> a
    void parseHttpResponse(java.io.InputStream) -> a
    java.util.LinkedList access$0() -> b
    java.util.LinkedList access$1() -> c
    com.coleman.log.Log access$2(com.coleman.ojm.http.HttpHandler) -> a
    void access$3(com.coleman.ojm.http.HttpHandler,java.io.OutputStream,com.coleman.ojm.http.SLRequest) -> a
    void access$4(com.coleman.ojm.http.HttpHandler,java.io.InputStream) -> a
    com.coleman.ojm.http.SLResponse access$5(com.coleman.ojm.http.HttpHandler) -> b
com.coleman.ojm.http.HttpHandler$1 -> com.coleman.ojm.a.b:
    com.coleman.ojm.http.HttpHandler this$0 -> a
    boolean val$background -> b
    com.coleman.ojm.http.SLRequest val$slRequest -> c
    void run() -> run
com.coleman.ojm.http.SLRequest -> com.coleman.ojm.a.d:
    java.lang.Object mRequestBean -> a
    boolean cancel -> b
    java.util.HashSet set -> c
    java.net.HttpURLConnection mConnection -> d
    java.lang.Object getRequest() -> a
    boolean isCancel() -> b
    void setCancel(boolean) -> a
    boolean addObserver(com.coleman.ojm.core.Observer) -> a
    java.util.Collection getObservers() -> c
    void setConnection(java.net.HttpURLConnection) -> a
    void startTimeOutCount() -> d
    void disconnect() -> e
    java.net.HttpURLConnection access$0(com.coleman.ojm.http.SLRequest) -> a
com.coleman.ojm.http.SLRequest$1 -> com.coleman.ojm.a.e:
    com.coleman.ojm.http.SLRequest this$0 -> a
    void run() -> run
com.coleman.ojm.http.SLResponse -> com.coleman.ojm.a.a:
    boolean loaded -> b
    com.coleman.ojm.bean.BasicResponse mResponseBean -> c
    com.coleman.ojm.bean.BasicResponse getResponse() -> a
    void notifyObservers(java.lang.Object) -> a
    void access$0(com.coleman.ojm.http.SLResponse,java.lang.Object) -> a
com.coleman.providers.downloads.Constants -> com.coleman.providers.downloads.d:
    boolean LOGV -> a
    boolean LOGVV -> b
com.coleman.providers.downloads.DownloadInfo -> com.coleman.providers.downloads.i:
    long mId -> a
    java.lang.String mUri -> b
    boolean mNoIntegrity -> c
    java.lang.String mHint -> d
    java.lang.String mFileName -> e
    java.lang.String mMimeType -> f
    int mDestination -> g
    int mVisibility -> h
    int mControl -> i
    int mStatus -> j
    int mNumFailed -> k
    int mRetryAfter -> l
    long mLastMod -> m
    java.lang.String mPackage -> n
    java.lang.String mClass -> o
    java.lang.String mExtras -> p
    java.lang.String mCookies -> q
    java.lang.String mUserAgent -> r
    java.lang.String mReferer -> s
    long mTotalBytes -> t
    long mCurrentBytes -> u
    java.lang.String mETag -> v
    boolean mMediaScanned -> w
    boolean mDeleted -> x
    java.lang.String mMediaProviderUri -> y
    boolean mIsPublicApi -> z
    int mAllowedNetworkTypes -> A
    boolean mAllowRoaming -> B
    java.lang.String mTitle -> C
    java.lang.String mDescription -> D
    int mBypassRecommendedSizeLimit -> E
    int mFuzz -> F
    boolean mHasActiveThread -> G
    java.util.List mRequestHeaders -> H
    com.coleman.providers.downloads.SystemFacade mSystemFacade -> I
    android.content.Context mContext -> J
    java.util.Collection getHeaders() -> a
    void sendIntentIfRequested() -> b
    long restartTime(long) -> a
    boolean isReadyToStart(long) -> d
    boolean hasCompletionNotification() -> c
    int checkCanUseNetwork() -> d
    boolean isRoamingAllowed() -> i
    java.lang.String getLogMessageForNetworkError(int) -> a
    int checkIsNetworkTypeAllowed(int) -> b
    int translateNetworkTypeToApiFlag(int) -> c
    int checkSizeAllowedForNetwork(int) -> d
    void startIfReady(long) -> b
    boolean isOnCache() -> e
    android.net.Uri getMyDownloadsUri() -> f
    android.net.Uri getAllDownloadsUri() -> g
    void logVerboseInfo() -> h
    long nextAction(long) -> c
    void notifyPauseDueToSize(boolean) -> a
    java.util.List access$1(com.coleman.providers.downloads.DownloadInfo) -> a
com.coleman.providers.downloads.DownloadInfo$Reader -> com.coleman.providers.downloads.c:
    android.content.ContentResolver mResolver -> a
    android.database.Cursor mCursor -> b
    android.database.CharArrayBuffer mOldChars -> c
    android.database.CharArrayBuffer mNewChars -> d
    com.coleman.providers.downloads.DownloadInfo newDownloadInfo(android.content.Context,com.coleman.providers.downloads.SystemFacade) -> a
    void updateFromDatabase(com.coleman.providers.downloads.DownloadInfo) -> a
    void readRequestHeaders(com.coleman.providers.downloads.DownloadInfo) -> b
    void addHeader(com.coleman.providers.downloads.DownloadInfo,java.lang.String,java.lang.String) -> a
    java.lang.String getString(java.lang.String,java.lang.String) -> a
    java.lang.Integer getInt(java.lang.String) -> a
    java.lang.Long getLong(java.lang.String) -> b
com.coleman.providers.downloads.DownloadManager -> com.coleman.providers.downloads.e:
    java.lang.String[] COLUMNS -> a
    java.lang.String[] UNDERLYING_COLUMNS -> b
    java.util.Set LONG_COLUMNS -> c
    android.content.ContentResolver mResolver -> d
    java.lang.String mPackageName -> e
    android.net.Uri mBaseUri -> f
    long enqueue(com.coleman.providers.downloads.DownloadManager$Request) -> a
    android.database.Cursor query(com.coleman.providers.downloads.DownloadManager$Query) -> a
    java.lang.String getWhereClauseForIds(long[]) -> a
    java.lang.String[] getWhereArgsForIds(long[]) -> b
    java.lang.String[] access$0() -> a
    java.util.Set access$1() -> b
com.coleman.providers.downloads.DownloadManager$CursorTranslator -> com.coleman.providers.downloads.g:
    android.net.Uri mBaseUri -> b
    boolean $assertionsDisabled -> a
    int getColumnIndex(java.lang.String) -> getColumnIndex
    int getColumnIndexOrThrow(java.lang.String) -> getColumnIndexOrThrow
    java.lang.String getColumnName(int) -> getColumnName
    java.lang.String[] getColumnNames() -> getColumnNames
    int getColumnCount() -> getColumnCount
    byte[] getBlob(int) -> getBlob
    double getDouble(int) -> getDouble
    boolean isLongColumn(java.lang.String) -> a
    float getFloat(int) -> getFloat
    int getInt(int) -> getInt
    long getLong(int) -> getLong
    short getShort(int) -> getShort
    java.lang.String getString(int) -> getString
    java.lang.String translateString(java.lang.String) -> b
    java.lang.String getLocalUri() -> a
    long translateLong(java.lang.String) -> c
    long getReason(int) -> a
    long getPausedReason(int) -> b
    long getErrorCode(int) -> c
    long getUnderlyingLong(java.lang.String) -> d
    java.lang.String getUnderlyingString(java.lang.String) -> e
    int translateStatus(int) -> d
com.coleman.providers.downloads.DownloadManager$Query -> com.coleman.providers.downloads.h:
    long[] mIds -> a
    java.lang.Integer mStatusFlags -> b
    java.lang.String mOrderByColumn -> c
    int mOrderDirection -> d
    boolean mOnlyIncludeVisibleInDownloadsUi -> e
    com.coleman.providers.downloads.DownloadManager$Query setFilterById(long[]) -> a
    android.database.Cursor runQuery(android.content.ContentResolver,java.lang.String[],android.net.Uri) -> a
    java.lang.String joinStrings(java.lang.String,java.lang.Iterable) -> a
    java.lang.String statusClause(java.lang.String,int) -> a
com.coleman.providers.downloads.DownloadManager$Request -> com.coleman.providers.downloads.a:
    android.net.Uri mUri -> b
    android.net.Uri mDestinationUri -> c
    java.util.List mRequestHeaders -> d
    java.lang.CharSequence mTitle -> e
    java.lang.CharSequence mDescription -> f
    boolean mShowNotification -> g
    java.lang.String mMimeType -> h
    boolean mRoamingAllowed -> i
    int mAllowedNetworkTypes -> j
    boolean mIsVisibleInDownloadsUi -> k
    boolean $assertionsDisabled -> a
    void setDestinationFromBase(java.io.File,java.lang.String) -> a
    android.content.ContentValues toContentValues(java.lang.String) -> a
    void encodeHttpHeaders(android.content.ContentValues) -> a
    void putIfNonNull(android.content.ContentValues,java.lang.String,java.lang.Object) -> a
com.coleman.providers.downloads.DownloadNotification -> com.coleman.providers.downloads.r:
    android.content.Context mContext -> a
    java.util.HashMap mNotifications -> b
    com.coleman.providers.downloads.SystemFacade mSystemFacade -> c
    void updateNotification(java.util.Collection) -> a
    void updateActiveNotification(java.util.Collection) -> b
    void updateCompletedNotification(java.util.Collection) -> c
    boolean isActiveAndVisible(com.coleman.providers.downloads.DownloadInfo) -> a
    boolean isCompleteAndVisible(com.coleman.providers.downloads.DownloadInfo) -> b
    java.lang.String getDownloadingText(long,long) -> a
com.coleman.providers.downloads.DownloadNotification$NotificationItem -> com.coleman.providers.downloads.k:
    int mId -> a
    long mTotalCurrent -> b
    long mTotalTotal -> c
    int mTitleCount -> d
    java.lang.String mPackageName -> e
    java.lang.String mDescription -> f
    java.lang.String[] mTitles -> g
    java.lang.String mPausedText -> h
    void addItem(java.lang.String,long,long) -> a
com.coleman.providers.downloads.DownloadProvider -> com.coleman.providers.downloads.DownloadProvider:
    android.content.UriMatcher sURIMatcher -> b
    android.net.Uri[] BASE_URIS -> c
    java.lang.String[] sAppReadableColumnsArray -> d
    java.util.HashSet sAppReadableColumnsSet -> e
    android.database.sqlite.SQLiteOpenHelper mOpenHelper -> f
    int mSystemUid -> g
    int mDefContainerUid -> h
    com.coleman.providers.downloads.SystemFacade mSystemFacade -> a
    boolean onCreate() -> onCreate
    java.lang.String getType(android.net.Uri) -> getType
    android.net.Uri insert(android.net.Uri,android.content.ContentValues) -> insert
    void checkFileUriDestination(android.content.ContentValues) -> a
    void checkInsertPermissions(android.content.ContentValues) -> b
    void enforceAllowedValues(android.content.ContentValues,java.lang.String,java.lang.Object[]) -> a
    android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> query
    void logVerboseQueryInfo(java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.database.sqlite.SQLiteDatabase) -> a
    java.lang.String getDownloadIdFromUri(android.net.Uri) -> a
    void insertRequestHeaders(android.database.sqlite.SQLiteDatabase,long,android.content.ContentValues) -> a
    android.database.Cursor queryRequestHeaders(android.database.sqlite.SQLiteDatabase,android.net.Uri) -> a
    void deleteRequestHeaders(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[]) -> a
    boolean shouldRestrictVisibility() -> a
    int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
    void notifyContentChanged(android.net.Uri,int) -> a
    com.coleman.providers.downloads.DownloadProvider$SqlSelection getWhereClause(android.net.Uri,java.lang.String,java.lang.String[],int) -> a
    int delete(android.net.Uri,java.lang.String,java.lang.String[]) -> delete
    android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String) -> openFile
    void logVerboseOpenFileInfo(android.net.Uri,java.lang.String) -> a
    void copyInteger(java.lang.String,android.content.ContentValues,android.content.ContentValues) -> a
    void copyBoolean(java.lang.String,android.content.ContentValues,android.content.ContentValues) -> b
    void copyString(java.lang.String,android.content.ContentValues,android.content.ContentValues) -> c
    void copyStringWithDefault(java.lang.String,android.content.ContentValues,android.content.ContentValues,java.lang.String) -> a
com.coleman.providers.downloads.DownloadProvider$DatabaseHelper -> com.coleman.providers.downloads.o:
    com.coleman.providers.downloads.DownloadProvider this$0 -> a
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    void upgradeTo(android.database.sqlite.SQLiteDatabase,int) -> a
    void fillNullValues(android.database.sqlite.SQLiteDatabase) -> a
    void fillNullValuesForColumn(android.database.sqlite.SQLiteDatabase,android.content.ContentValues) -> a
    void makeCacheDownloadsInvisible(android.database.sqlite.SQLiteDatabase) -> b
    void addColumn(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,java.lang.String) -> a
    void createDownloadsTable(android.database.sqlite.SQLiteDatabase) -> c
    void createHeadersTable(android.database.sqlite.SQLiteDatabase) -> d
com.coleman.providers.downloads.DownloadProvider$ReadOnlyCursorWrapper -> com.coleman.providers.downloads.z:
    android.database.CrossProcessCursor mCursor -> b
    com.coleman.providers.downloads.DownloadProvider this$0 -> a
    void fillWindow(int,android.database.CursorWindow) -> fillWindow
    android.database.CursorWindow getWindow() -> getWindow
    boolean onMove(int,int) -> onMove
com.coleman.providers.downloads.DownloadProvider$SqlSelection -> com.coleman.providers.downloads.s:
    java.lang.StringBuilder mWhereClause -> a
    java.util.List mParameters -> b
    void appendClause(java.lang.String,java.lang.Object[]) -> a
    java.lang.String getSelection() -> a
    java.lang.String[] getParameters() -> b
com.coleman.providers.downloads.DownloadReceiver -> com.coleman.providers.downloads.DownloadReceiver:
    com.coleman.providers.downloads.SystemFacade mSystemFacade -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void handleNotificationBroadcast(android.content.Context,android.content.Intent) -> a
    void hideNotification(android.content.Context,android.net.Uri,android.database.Cursor) -> a
    void openDownload(android.content.Context,android.database.Cursor) -> a
    void sendNotificationClickedIntent(android.content.Intent,android.database.Cursor) -> a
    void startService(android.content.Context) -> a
com.coleman.providers.downloads.DownloadService -> com.coleman.providers.downloads.DownloadService:
    com.coleman.providers.downloads.DownloadService$DownloadManagerContentObserver mObserver -> c
    com.coleman.providers.downloads.DownloadNotification mNotifier -> d
    java.util.Map mDownloads -> e
    com.coleman.providers.downloads.DownloadService$UpdateThread mUpdateThread -> a
    boolean mPendingUpdate -> f
    boolean mMediaScannerConnecting -> g
    com.coleman.providers.downloads.SystemFacade mSystemFacade -> b
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    void onDestroy() -> onDestroy
    void updateFromProvider() -> a
    void removeSpuriousFiles() -> b
    void trimDatabase() -> c
    com.coleman.providers.downloads.DownloadInfo insertDownload(com.coleman.providers.downloads.DownloadInfo$Reader,long) -> a
    void updateDownload(com.coleman.providers.downloads.DownloadInfo$Reader,com.coleman.providers.downloads.DownloadInfo,long) -> a
    void deleteDownload(long) -> a
    void access$0(com.coleman.providers.downloads.DownloadService) -> a
    void access$1(com.coleman.providers.downloads.DownloadService) -> b
    void access$2(com.coleman.providers.downloads.DownloadService) -> c
    boolean access$3(com.coleman.providers.downloads.DownloadService) -> d
    void access$4(com.coleman.providers.downloads.DownloadService,boolean) -> a
    java.util.Map access$5(com.coleman.providers.downloads.DownloadService) -> e
    void access$6(com.coleman.providers.downloads.DownloadService,com.coleman.providers.downloads.DownloadInfo$Reader,com.coleman.providers.downloads.DownloadInfo,long) -> a
    com.coleman.providers.downloads.DownloadInfo access$7(com.coleman.providers.downloads.DownloadService,com.coleman.providers.downloads.DownloadInfo$Reader,long) -> a
    void access$8(com.coleman.providers.downloads.DownloadService,long) -> a
    com.coleman.providers.downloads.DownloadNotification access$9(com.coleman.providers.downloads.DownloadService) -> f
com.coleman.providers.downloads.DownloadService$DownloadManagerContentObserver -> com.coleman.providers.downloads.n:
    com.coleman.providers.downloads.DownloadService this$0 -> a
    void onChange(boolean) -> onChange
com.coleman.providers.downloads.DownloadService$UpdateThread -> com.coleman.providers.downloads.t:
    com.coleman.providers.downloads.DownloadService this$0 -> a
    void run() -> run
    void scheduleAlarm(long) -> a
com.coleman.providers.downloads.DownloadThread -> com.coleman.providers.downloads.j:
    android.content.Context mContext -> a
    com.coleman.providers.downloads.DownloadInfo mInfo -> b
    com.coleman.providers.downloads.SystemFacade mSystemFacade -> c
    void run() -> run
    void executeDownload(com.coleman.providers.downloads.DownloadThread$State,org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpGet) -> a
    void checkConnectivity(com.coleman.providers.downloads.DownloadThread$State) -> a
    void transferData(com.coleman.providers.downloads.DownloadThread$State,com.coleman.providers.downloads.DownloadThread$InnerState,byte[],java.io.InputStream) -> a
    void finalizeDestinationFile(com.coleman.providers.downloads.DownloadThread$State) -> b
    void cleanupDestination(com.coleman.providers.downloads.DownloadThread$State,int) -> a
    void syncDestination(com.coleman.providers.downloads.DownloadThread$State) -> c
    void closeDestination(com.coleman.providers.downloads.DownloadThread$State) -> d
    void checkPausedOrCanceled(com.coleman.providers.downloads.DownloadThread$State) -> e
    void reportProgress(com.coleman.providers.downloads.DownloadThread$State,com.coleman.providers.downloads.DownloadThread$InnerState) -> a
    void writeDataToDestination(com.coleman.providers.downloads.DownloadThread$State,byte[],int) -> a
    void handleEndOfStream(com.coleman.providers.downloads.DownloadThread$State,com.coleman.providers.downloads.DownloadThread$InnerState) -> b
    boolean cannotResume(com.coleman.providers.downloads.DownloadThread$InnerState) -> a
    int readFromResponse(com.coleman.providers.downloads.DownloadThread$State,com.coleman.providers.downloads.DownloadThread$InnerState,byte[],java.io.InputStream) -> b
    java.io.InputStream openResponseEntity(com.coleman.providers.downloads.DownloadThread$State,org.apache.http.HttpResponse) -> a
    void logNetworkState() -> a
    void processResponseHeaders(com.coleman.providers.downloads.DownloadThread$State,com.coleman.providers.downloads.DownloadThread$InnerState,org.apache.http.HttpResponse) -> a
    void updateDatabaseFromHeaders(com.coleman.providers.downloads.DownloadThread$State,com.coleman.providers.downloads.DownloadThread$InnerState) -> c
    void readResponseHeaders(com.coleman.providers.downloads.DownloadThread$State,com.coleman.providers.downloads.DownloadThread$InnerState,org.apache.http.HttpResponse) -> b
    void handleExceptionalStatus(com.coleman.providers.downloads.DownloadThread$State,com.coleman.providers.downloads.DownloadThread$InnerState,org.apache.http.HttpResponse) -> c
    void handleOtherStatus(com.coleman.providers.downloads.DownloadThread$State,com.coleman.providers.downloads.DownloadThread$InnerState,int) -> a
    void handleRedirect(com.coleman.providers.downloads.DownloadThread$State,org.apache.http.HttpResponse,int) -> a
    void handleServiceUnavailable(com.coleman.providers.downloads.DownloadThread$State,org.apache.http.HttpResponse) -> b
    org.apache.http.HttpResponse sendRequest(com.coleman.providers.downloads.DownloadThread$State,org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpGet) -> b
    int getFinalStatusForHttpError(com.coleman.providers.downloads.DownloadThread$State) -> f
    void setupDestinationFile(com.coleman.providers.downloads.DownloadThread$State,com.coleman.providers.downloads.DownloadThread$InnerState) -> d
    void addRequestHeaders(com.coleman.providers.downloads.DownloadThread$InnerState,org.apache.http.client.methods.HttpGet) -> a
    void notifyDownloadCompleted(int,boolean,int,boolean,java.lang.String,java.lang.String,java.lang.String) -> a
    void notifyThroughDatabase(int,boolean,int,boolean,java.lang.String,java.lang.String,java.lang.String) -> b
    java.lang.String sanitizeMimeType(java.lang.String) -> b
    java.lang.String access$0(java.lang.String) -> a
com.coleman.providers.downloads.DownloadThread$InnerState -> com.coleman.providers.downloads.f:
    int mBytesSoFar -> a
    java.lang.String mHeaderETag -> b
    boolean mContinuingDownload -> c
    java.lang.String mHeaderContentLength -> d
    java.lang.String mHeaderContentDisposition -> e
    java.lang.String mHeaderContentLocation -> f
    int mBytesNotified -> g
    long mTimeLastNotification -> h
com.coleman.providers.downloads.DownloadThread$RetryDownload -> com.coleman.providers.downloads.x:
    com.coleman.providers.downloads.DownloadThread this$0 -> a
com.coleman.providers.downloads.DownloadThread$State -> com.coleman.providers.downloads.m:
    java.lang.String mFilename -> a
    java.io.FileOutputStream mStream -> b
    java.lang.String mMimeType -> c
    boolean mCountRetry -> d
    int mRetryAfter -> e
    int mRedirectCount -> f
    java.lang.String mNewUri -> g
    boolean mGotData -> h
    java.lang.String mRequestUri -> i
com.coleman.providers.downloads.DownloadThread$StopRequest -> com.coleman.providers.downloads.v:
    int mFinalStatus -> a
    com.coleman.providers.downloads.DownloadThread this$0 -> b
com.coleman.providers.downloads.Downloads -> com.coleman.providers.downloads.l:
    java.lang.String AUTHORITY -> a
    android.net.Uri CONTENT_URI -> b
    boolean isStatusError(int) -> a
com.coleman.providers.downloads.Downloads$Impl -> com.coleman.providers.downloads.b:
    android.net.Uri CONTENT_URI -> a
    android.net.Uri ALL_DOWNLOADS_CONTENT_URI -> b
    boolean isStatusError(int) -> a
    boolean isStatusCompleted(int) -> b
com.coleman.providers.downloads.Helpers -> com.coleman.providers.downloads.y:
    java.util.Random sRandom -> a
    java.util.regex.Pattern CONTENT_DISPOSITION_PATTERN -> b
    java.lang.String parseContentDisposition(java.lang.String) -> c
    java.lang.String generateSaveFile(android.content.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,long,boolean) -> a
    java.lang.String getPathForFileUri(java.lang.String,long) -> a
    java.io.File getFilesystemRoot(java.lang.String) -> a
    java.lang.String chooseFullPath(android.content.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,long) -> a
    void checkCanHandleDownload(android.content.Context,java.lang.String,int,boolean) -> a
    java.io.File locateDestinationDirectory(android.content.Context,java.lang.String,int,long) -> a
    java.io.File getExternalDestination(long) -> a
    boolean isExternalMediaMounted() -> a
    java.io.File getCacheDestination(android.content.Context,long) -> b
    long getAvailableBytes(java.io.File) -> a
    java.lang.String chooseFilename(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int) -> a
    java.lang.String chooseExtensionFromMimeType(java.lang.String,boolean) -> a
    java.lang.String chooseExtensionFromFilename(java.lang.String,int,java.lang.String,int) -> a
    java.lang.String chooseUniqueFilename(int,java.lang.String,java.lang.String,boolean) -> a
    boolean discardPurgeableFiles(android.content.Context,long) -> a
    boolean isNetworkAvailable(com.coleman.providers.downloads.SystemFacade) -> a
    boolean isFilenameValid(java.lang.String) -> b
    void validateSelection(java.lang.String,java.util.Set) -> a
    void parseExpression(com.coleman.providers.downloads.Helpers$Lexer) -> a
    void parseStatement(com.coleman.providers.downloads.Helpers$Lexer) -> b
    void deleteFile(android.content.ContentResolver,long,java.lang.String,java.lang.String) -> a
com.coleman.providers.downloads.Helpers$GenerateSaveFileError -> com.coleman.providers.downloads.q:
    int mStatus -> a
    java.lang.String mMessage -> b
com.coleman.providers.downloads.Helpers$Lexer -> com.coleman.providers.downloads.w:
    java.lang.String mSelection -> a
    java.util.Set mAllowedColumns -> b
    int mOffset -> c
    int mCurrentToken -> d
    char[] mChars -> e
    int currentToken() -> a
    void advance() -> b
    boolean isIdentifierStart(char) -> a
    boolean isIdentifierChar(char) -> b
com.coleman.providers.downloads.RealSystemFacade -> com.coleman.providers.downloads.p:
    android.content.Context mContext -> a
    android.app.NotificationManager mNotificationManager -> b
    long currentTimeMillis() -> a
    java.lang.Integer getActiveNetworkType() -> b
    boolean isNetworkRoaming() -> c
    java.lang.Long getMaxBytesOverMobile() -> d
    java.lang.Long getRecommendedMaxBytesOverMobile() -> e
    void sendBroadcast(android.content.Intent) -> a
    void postNotification(long,android.app.Notification) -> a
    void cancelNotification(long) -> a
    void cancelAllNotifications() -> f
    void startThread(java.lang.Thread) -> a
com.coleman.providers.downloads.SizeLimitActivity -> com.coleman.providers.downloads.SizeLimitActivity:
    android.app.Dialog mDialog -> a
    java.util.Queue mDownloadsToShow -> b
    android.net.Uri mCurrentUri -> c
    android.content.Intent mCurrentIntent -> d
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    void showNextDialog() -> a
    void showDialog(android.database.Cursor) -> a
    void onCancel(android.content.DialogInterface) -> onCancel
    void dialogClosed() -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.coleman.providers.downloads.SystemFacade -> com.coleman.providers.downloads.u:
    long currentTimeMillis() -> a
    java.lang.Integer getActiveNetworkType() -> b
    boolean isNetworkRoaming() -> c
    java.lang.Long getMaxBytesOverMobile() -> d
    java.lang.Long getRecommendedMaxBytesOverMobile() -> e
    void sendBroadcast(android.content.Intent) -> a
    void postNotification(long,android.app.Notification) -> a
    void cancelNotification(long) -> a
    void cancelAllNotifications() -> f
    void startThread(java.lang.Thread) -> a
com.coleman.tools.InfoGather -> com.coleman.b.a:
    com.coleman.log.Log Log -> a
    com.coleman.ojm.bean.LoginReq gatherLoginInfo(android.content.Context) -> a
    java.lang.String getCurLevelInfo(android.content.Context) -> b
com.coleman.tools.chart.ChartManager -> com.coleman.b.a.a:
    java.lang.String TAG -> a
    com.coleman.tools.chart.ChartManager chartManager -> b
    com.coleman.log.Log Log -> c
    com.coleman.tools.chart.ChartManager getInstance() -> a
    android.view.View getChartView(android.content.Context,int,int) -> a
    org.achartengine.model.XYMultipleSeriesDataset buildDateDataset(java.lang.String[],java.util.List,java.util.List) -> a
    void setChartSettings(org.achartengine.renderer.XYMultipleSeriesRenderer,java.lang.String,java.lang.String,java.lang.String,double,double,double,double,int,int) -> a
    org.achartengine.renderer.XYMultipleSeriesRenderer buildRenderer(int[],org.achartengine.chart.PointStyle[]) -> a
    void setRenderer(org.achartengine.renderer.XYMultipleSeriesRenderer,int[],org.achartengine.chart.PointStyle[]) -> a
com.coleman.util.AppSettings -> com.coleman.util.f:
    java.lang.String[][] COLOR_MODE -> a
    java.lang.String[] METHODS -> b
    java.lang.String[] DEFAULT_METHOD_VALUE -> c
    void saveBoolean(java.lang.String,boolean) -> a
    boolean getBoolean(java.lang.String,boolean) -> b
    void saveString(java.lang.String,java.lang.String) -> a
    java.lang.String getString(java.lang.String,java.lang.String) -> b
    void saveInt(java.lang.String,int) -> a
    int getInt(java.lang.String,int) -> b
    void saveLong(java.lang.String,long) -> a
    long getLong(java.lang.String,long) -> b
    android.content.SharedPreferences getSharedPreferences() -> a
com.coleman.util.Config -> com.coleman.util.g:
    boolean isSimulator(android.content.Context) -> a
    com.coleman.log.Log getLog() -> a
    boolean isExternalMediaMounted() -> b
    java.lang.String getDeviceId(android.content.Context) -> b
com.coleman.util.ConvertUtils -> com.coleman.util.k:
    int unsignedByteToInt(byte) -> a
    long unsigned4BytesToInt(byte[],int) -> a
com.coleman.util.DialogUtil -> com.coleman.util.b:
    java.lang.String TAG -> a
    com.coleman.log.Log Log -> b
    android.app.Dialog showLoadingDialog(android.content.Context,int) -> a
    android.app.Dialog showLoadingDialog(android.content.Context,java.lang.String) -> a
    boolean unregister(android.content.Context,android.app.Dialog) -> a
com.coleman.util.DialogUtil$1 -> com.coleman.util.h:
    void onClick(android.content.DialogInterface,int) -> onClick
com.coleman.util.DialogUtil$2 -> com.coleman.util.i:
    void onCancel(android.content.DialogInterface) -> onCancel
com.coleman.util.DictDataProcessingCenter -> com.coleman.util.c:
    java.lang.String TAG -> a
    com.coleman.log.Log Log -> b
    java.lang.String process4TTS(java.lang.String) -> a
    java.lang.String processBabylon4TTS(java.lang.String) -> c
    java.lang.String processLangdao4TTS(java.lang.String) -> d
    java.lang.String process4MultiSelect(java.lang.String) -> b
    java.lang.String processLangdao4MultiSelect(java.lang.String) -> e
com.coleman.util.FileTransfer -> com.coleman.util.j:
    void downloadFile(java.lang.String,java.lang.String) -> a
com.coleman.util.GeneralParser -> com.coleman.util.l:
    java.lang.String TAG -> a
    com.coleman.log.Log Log -> b
    java.util.ArrayList parseFile(android.content.Context,java.lang.String,boolean,com.coleman.kingword.wordlist.WordListManager$IProgressNotifier) -> a
    boolean isQuickList(java.lang.CharSequence) -> a
    java.util.ArrayList getQuickWorldList(java.lang.String) -> a
    java.util.ArrayList getWorldList(java.lang.CharSequence) -> b
com.coleman.util.MyApp -> com.coleman.util.MyApp:
    java.lang.String TAG -> c
    com.coleman.log.Log Log -> d
    android.content.Context context -> a
    android.os.Handler handler -> b
    void onCreate() -> onCreate
    void onTerminate() -> onTerminate
com.coleman.util.ThreadUtils -> com.coleman.util.d:
    java.util.concurrent.ExecutorService executor -> a
    void prepare() -> a
    void shutdown() -> b
    void execute(java.lang.Runnable) -> a
com.coleman.util.ToastUtil -> com.coleman.util.e:
    void show(java.lang.String) -> a
    void show(java.lang.String,int) -> a
    void showMsg(java.lang.String,int) -> b
com.coleman.util.ToastUtil$1 -> com.coleman.util.a:
    java.lang.String val$msg -> a
    int val$length -> b
    void run() -> run
com.sun.activation.registries.LineTokenizer -> com.sun.a.a.a:
    int currentPosition -> a
    int maxPosition -> b
    java.lang.String str -> c
    java.util.Vector stack -> d
    void skipWhiteSpace() -> c
    boolean hasMoreTokens() -> a
    java.lang.String nextToken() -> b
com.sun.activation.registries.LogSupport -> com.sun.a.a.f:
    boolean debug -> a
    java.util.logging.Logger logger -> b
    java.util.logging.Level level -> c
    void log(java.lang.String) -> a
    void log(java.lang.String,java.lang.Throwable) -> a
    boolean isLoggable() -> a
com.sun.activation.registries.MailcapFile -> com.sun.a.a.c:
    java.util.Map type_hash -> a
    java.util.Map fallback_hash -> b
    java.util.Map native_commands -> c
    boolean addReverse -> d
    java.util.Map getMailcapList(java.lang.String) -> a
    java.util.Map getMailcapFallbackList(java.lang.String) -> b
    java.lang.String[] getMimeTypes() -> a
    java.lang.String[] getNativeCommands(java.lang.String) -> c
    java.util.Map mergeResults(java.util.Map,java.util.Map) -> a
    void appendToMailcap(java.lang.String) -> d
    void parse(java.io.Reader) -> a
    void parseLine(java.lang.String) -> e
    void reportParseError(int,int,java.lang.String) -> a
    void reportParseError(int,int,int,java.lang.String) -> a
    void reportParseError(int,int,int,int,java.lang.String) -> a
com.sun.activation.registries.MailcapParseException -> com.sun.a.a.d:
com.sun.activation.registries.MailcapTokenizer -> com.sun.a.a.b:
    java.lang.String data -> a
    int dataIndex -> b
    int dataLength -> c
    int currentToken -> d
    java.lang.String currentTokenValue -> e
    boolean isAutoquoting -> f
    char autoquoteChar -> g
    void setIsAutoquoting(boolean) -> a
    java.lang.String nameForToken(int) -> a
    java.lang.String getCurrentTokenValue() -> a
    int nextToken() -> b
    void processStringToken() -> c
    void processAutoquoteToken() -> d
    boolean isSpecialChar(char) -> a
    boolean isControlChar(char) -> b
    boolean isWhiteSpaceChar(char) -> c
    boolean isStringTokenChar(char) -> d
    java.lang.String fixEscapeSequences(java.lang.String) -> a
com.sun.activation.registries.MimeTypeEntry -> com.sun.a.a.g:
    java.lang.String type -> a
    java.lang.String extension -> b
    java.lang.String getMIMEType() -> a
    java.lang.String toString() -> toString
com.sun.activation.registries.MimeTypeFile -> com.sun.a.a.e:
    java.lang.String fname -> a
    java.util.Hashtable type_hash -> b
    com.sun.activation.registries.MimeTypeEntry getMimeTypeEntry(java.lang.String) -> a
    java.lang.String getMIMETypeString(java.lang.String) -> b
    void appendToRegistry(java.lang.String) -> c
    void parse(java.io.BufferedReader) -> a
    void parseEntry(java.lang.String) -> d
com.sun.mail.smtp.DigestMD5 -> com.sun.mail.smtp.e:
    java.io.PrintStream debugout -> a
    java.security.MessageDigest md5 -> b
    java.lang.String uri -> c
    java.lang.String clientResponse -> d
    char[] digits -> e
    byte[] authClient(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    boolean authServer(java.lang.String) -> a
    java.util.Hashtable tokenize(java.lang.String) -> b
    java.lang.String toHex(byte[]) -> a
com.sun.mail.smtp.SMTPAddressFailedException -> com.sun.mail.smtp.a:
    javax.mail.internet.InternetAddress addr -> a
    java.lang.String cmd -> b
    int rc -> c
com.sun.mail.smtp.SMTPAddressSucceededException -> com.sun.mail.smtp.d:
    javax.mail.internet.InternetAddress addr -> a
    java.lang.String cmd -> b
    int rc -> c
com.sun.mail.smtp.SMTPMessage -> com.sun.mail.smtp.f:
    java.lang.String[] returnOptionString -> i
    java.lang.String envelopeFrom -> j
    int notifyOptions -> k
    int returnOption -> l
    boolean sendPartial -> m
    boolean allow8bitMIME -> n
    java.lang.String submitter -> o
    java.lang.String extension -> p
    java.lang.String getEnvelopeFrom() -> e
    java.lang.String getDSNNotify() -> f
    java.lang.String getDSNRet() -> g
    boolean getAllow8bitMIME() -> h
    boolean getSendPartial() -> i
    java.lang.String getSubmitter() -> j
    java.lang.String getMailExtension() -> k
com.sun.mail.smtp.SMTPOutputStream -> com.sun.mail.smtp.c:
    void write(int) -> write
    void write(byte[],int,int) -> write
    void flush() -> flush
    void ensureAtBOL() -> a
com.sun.mail.smtp.SMTPSSLTransport -> com.sun.mail.smtp.SMTPSSLTransport:
com.sun.mail.smtp.SMTPSendFailedException -> com.sun.mail.smtp.b:
    java.lang.String cmd -> a
    int rc -> b
com.sun.mail.smtp.SMTPTransport -> com.sun.mail.smtp.SMTPTransport:
    java.lang.String name -> b
    int defaultPort -> c
    boolean isSSL -> d
    javax.mail.internet.MimeMessage message -> e
    javax.mail.Address[] addresses -> f
    javax.mail.Address[] validSentAddr -> g
    javax.mail.Address[] validUnsentAddr -> h
    javax.mail.Address[] invalidAddr -> i
    boolean sendPartiallyFailed -> j
    javax.mail.MessagingException exception -> k
    com.sun.mail.smtp.SMTPOutputStream dataStream -> l
    java.util.Hashtable extMap -> m
    boolean quitWait -> n
    java.lang.String saslRealm -> o
    boolean reportSuccess -> p
    boolean useStartTLS -> q
    boolean useRset -> r
    java.io.PrintStream out -> s
    java.lang.String localHostName -> t
    java.lang.String lastServerResponse -> u
    int lastReturnCode -> v
    java.lang.String[] ignoreList -> w
    byte[] CRLF -> x
    com.sun.mail.smtp.DigestMD5 md5support -> y
    java.io.BufferedInputStream serverInput -> z
    com.sun.mail.util.LineInputStream lineInputStream -> A
    java.io.OutputStream serverOutput -> B
    java.net.Socket serverSocket -> C
    char[] hexchar -> D
    boolean $assertionsDisabled -> a
    java.lang.String getLocalHost() -> a
    java.lang.String getSASLRealm() -> b
    com.sun.mail.smtp.DigestMD5 getMD5() -> j
    boolean protocolConnect(java.lang.String,int,java.lang.String,java.lang.String) -> protocolConnect
    void sendMessage(javax.mail.Message,javax.mail.Address[]) -> sendMessage
    void close() -> close
    void closeConnection() -> k
    boolean isConnected() -> isConnected
    void expandGroups() -> l
    boolean convertTo8Bit(javax.mail.internet.MimePart) -> a
    boolean is8Bit(java.io.InputStream) -> a
    void finalize() -> finalize
    void helo(java.lang.String) -> a
    boolean ehlo(java.lang.String) -> b
    void mailFrom() -> c
    void rcptTo() -> d
    java.io.OutputStream data() -> e
    void finishData() -> f
    void startTLS() -> g
    void openServer(java.lang.String,int) -> b
    void openServer() -> m
    void initStreams() -> n
    void issueCommand(java.lang.String,int) -> a
    void issueSendCommand(java.lang.String,int) -> c
    int simpleCommand(java.lang.String) -> c
    int simpleCommand(byte[]) -> a
    void sendCommand(java.lang.String) -> d
    void sendCommand(byte[]) -> b
    int readServerResponse() -> h
    void checkConnected() -> i
    boolean isNotLastLine(java.lang.String) -> h
    java.lang.String normalizeAddress(java.lang.String) -> i
    boolean supportsExtension(java.lang.String) -> e
    boolean supportsAuthentication(java.lang.String) -> f
    java.lang.String xtext(java.lang.String) -> g
com.sun.mail.util.ASCIIUtility -> com.sun.mail.a.c:
    int parseInt(byte[],int,int,int) -> a
    java.lang.String toString(byte[],int,int) -> a
    byte[] getBytes(java.lang.String) -> a
    byte[] getBytes(java.io.InputStream) -> a
com.sun.mail.util.BASE64DecoderStream -> com.sun.mail.a.a:
    byte[] buffer -> a
    int bufsize -> b
    int index -> c
    byte[] input_buffer -> d
    int input_pos -> e
    int input_len -> f
    boolean ignoreErrors -> g
    char[] pem_array -> h
    byte[] pem_convert_array -> i
    int read() -> read
    int read(byte[],int,int) -> read
    boolean markSupported() -> markSupported
    int available() -> available
    int decode(byte[],int,int) -> a
    int getByte() -> a
    java.lang.String recentChars() -> b
com.sun.mail.util.BASE64EncoderStream -> com.sun.mail.a.k:
    byte[] buffer -> a
    int bufsize -> b
    byte[] outbuf -> c
    int count -> d
    int bytesPerLine -> e
    int lineLimit -> f
    boolean noCRLF -> g
    byte[] newline -> h
    char[] pem_array -> i
    void write(byte[],int,int) -> write
    void write(byte[]) -> write
    void write(int) -> write
    void flush() -> flush
    void close() -> close
    void encode() -> a
    byte[] encode(byte[],int,int,byte[]) -> a
    int encodedSize(int) -> a
com.sun.mail.util.BEncoderStream -> com.sun.mail.a.f:
    int encodedLength(byte[]) -> a
com.sun.mail.util.CRLFOutputStream -> com.sun.mail.a.r:
    int lastb -> a
    boolean atBOL -> b
    byte[] newline -> c
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void writeln() -> b
com.sun.mail.util.FolderClosedIOException -> com.sun.mail.a.m:
    javax.mail.Folder folder -> a
    javax.mail.Folder getFolder() -> a
com.sun.mail.util.LineInputStream -> com.sun.mail.a.j:
    char[] lineBuffer -> a
    java.lang.String readLine() -> a
com.sun.mail.util.LineOutputStream -> com.sun.mail.a.h:
    byte[] newline -> a
    void writeln(java.lang.String) -> a
    void writeln() -> a
com.sun.mail.util.MessageRemovedIOException -> com.sun.mail.a.e:
com.sun.mail.util.QDecoderStream -> com.sun.mail.a.s:
    int read() -> read
com.sun.mail.util.QEncoderStream -> com.sun.mail.a.g:
    java.lang.String specials -> a
    java.lang.String WORD_SPECIALS -> b
    java.lang.String TEXT_SPECIALS -> c
    void write(int) -> write
    int encodedLength(byte[],boolean) -> a
com.sun.mail.util.QPDecoderStream -> com.sun.mail.a.q:
    byte[] ba -> a
    int spaces -> b
    int read() -> read
    int read(byte[],int,int) -> read
    boolean markSupported() -> markSupported
    int available() -> available
com.sun.mail.util.QPEncoderStream -> com.sun.mail.a.l:
    int count -> a
    int bytesPerLine -> b
    boolean gotSpace -> c
    boolean gotCR -> d
    char[] hex -> e
    void write(byte[],int,int) -> write
    void write(byte[]) -> write
    void write(int) -> write
    void flush() -> flush
    void close() -> close
    void outputCRLF() -> a
    void output(int,boolean) -> a
com.sun.mail.util.SocketFetcher -> com.sun.mail.a.p:
    java.net.Socket getSocket(java.lang.String,int,java.util.Properties,java.lang.String,boolean) -> a
    java.net.Socket createSocket(java.net.InetAddress,int,java.lang.String,int,int,javax.net.SocketFactory,boolean) -> a
    javax.net.SocketFactory getSocketFactory(java.lang.String) -> a
    java.net.Socket startTLS(java.net.Socket,java.util.Properties,java.lang.String) -> a
    void configureSSLSocket(java.net.Socket,java.util.Properties,java.lang.String) -> b
    java.lang.String[] stringArray(java.lang.String) -> b
    java.lang.ClassLoader getContextClassLoader() -> a
com.sun.mail.util.SocketFetcher$1 -> com.sun.mail.a.d:
    java.lang.Object run() -> run
com.sun.mail.util.TraceInputStream -> com.sun.mail.a.n:
    boolean trace -> a
    boolean quote -> b
    java.io.OutputStream traceOut -> c
    void setTrace(boolean) -> a
    void setQuote(boolean) -> b
    int read() -> read
    int read(byte[],int,int) -> read
    void writeByte(int) -> a
com.sun.mail.util.TraceOutputStream -> com.sun.mail.a.o:
    boolean trace -> a
    boolean quote -> b
    java.io.OutputStream traceOut -> c
    void setTrace(boolean) -> a
    void setQuote(boolean) -> b
    void write(int) -> write
    void write(byte[],int,int) -> write
    void writeByte(int) -> a
com.sun.mail.util.UUDecoderStream -> com.sun.mail.a.b:
    java.lang.String name -> a
    int mode -> b
    byte[] buffer -> c
    int bufsize -> d
    int index -> e
    boolean gotPrefix -> f
    boolean gotEnd -> g
    com.sun.mail.util.LineInputStream lin -> h
    int read() -> read
    int read(byte[],int,int) -> read
    boolean markSupported() -> markSupported
    int available() -> available
    void readPrefix() -> a
    boolean decode() -> b
com.sun.mail.util.UUEncoderStream -> com.sun.mail.a.i:
    byte[] buffer -> c
    int bufsize -> d
    boolean wrotePrefix -> e
    java.lang.String name -> a
    int mode -> b
    void write(byte[],int,int) -> write
    void write(byte[]) -> write
    void write(int) -> write
    void flush() -> flush
    void close() -> close
    void writePrefix() -> a
    void writeSuffix() -> b
    void encode() -> c
javax.activation.ActivationDataFlavor -> javax.activation.ActivationDataFlavor:
    java.lang.String mimeType -> mimeType
    javax.activation.MimeType mimeObject -> mimeObject
    java.lang.String humanPresentableName -> humanPresentableName
    java.lang.Class representationClass -> representationClass
    java.lang.String getMimeType() -> getMimeType
    java.lang.Class getRepresentationClass() -> getRepresentationClass
    java.lang.String getHumanPresentableName() -> getHumanPresentableName
    void setHumanPresentableName(java.lang.String) -> setHumanPresentableName
    boolean equals(myjava.awt.datatransfer.DataFlavor) -> equals
    boolean isMimeTypeEqual(java.lang.String) -> isMimeTypeEqual
    java.lang.String normalizeMimeTypeParameter(java.lang.String,java.lang.String) -> normalizeMimeTypeParameter
    java.lang.String normalizeMimeType(java.lang.String) -> normalizeMimeType
javax.activation.CommandInfo -> javax.activation.CommandInfo:
    java.lang.String verb -> verb
    java.lang.String className -> className
    java.lang.String getCommandName() -> getCommandName
    java.lang.String getCommandClass() -> getCommandClass
    java.lang.Object getCommandObject(javax.activation.DataHandler,java.lang.ClassLoader) -> getCommandObject
javax.activation.CommandMap -> javax.activation.CommandMap:
    javax.activation.CommandMap defaultCommandMap -> defaultCommandMap
    javax.activation.CommandMap getDefaultCommandMap() -> getDefaultCommandMap
    void setDefaultCommandMap(javax.activation.CommandMap) -> setDefaultCommandMap
    javax.activation.CommandInfo[] getPreferredCommands(java.lang.String) -> getPreferredCommands
    javax.activation.CommandInfo[] getPreferredCommands(java.lang.String,javax.activation.DataSource) -> getPreferredCommands
    javax.activation.CommandInfo[] getAllCommands(java.lang.String) -> getAllCommands
    javax.activation.CommandInfo[] getAllCommands(java.lang.String,javax.activation.DataSource) -> getAllCommands
    javax.activation.CommandInfo getCommand(java.lang.String,java.lang.String) -> getCommand
    javax.activation.CommandInfo getCommand(java.lang.String,java.lang.String,javax.activation.DataSource) -> getCommand
    javax.activation.DataContentHandler createDataContentHandler(java.lang.String) -> createDataContentHandler
    javax.activation.DataContentHandler createDataContentHandler(java.lang.String,javax.activation.DataSource) -> createDataContentHandler
    java.lang.String[] getMimeTypes() -> getMimeTypes
javax.activation.CommandObject -> javax.activation.CommandObject:
    void setCommandContext(java.lang.String,javax.activation.DataHandler) -> setCommandContext
javax.activation.DataContentHandler -> javax.activation.DataContentHandler:
    myjava.awt.datatransfer.DataFlavor[] getTransferDataFlavors() -> getTransferDataFlavors
    java.lang.Object getTransferData(myjava.awt.datatransfer.DataFlavor,javax.activation.DataSource) -> getTransferData
    java.lang.Object getContent(javax.activation.DataSource) -> getContent
    void writeTo(java.lang.Object,java.lang.String,java.io.OutputStream) -> writeTo
javax.activation.DataContentHandlerFactory -> javax.activation.DataContentHandlerFactory:
    javax.activation.DataContentHandler createDataContentHandler(java.lang.String) -> createDataContentHandler
javax.activation.DataHandler -> javax.activation.DataHandler:
    javax.activation.DataSource dataSource -> dataSource
    javax.activation.DataSource objDataSource -> objDataSource
    java.lang.Object object -> object
    java.lang.String objectMimeType -> objectMimeType
    javax.activation.CommandMap currentCommandMap -> currentCommandMap
    myjava.awt.datatransfer.DataFlavor[] emptyFlavors -> emptyFlavors
    myjava.awt.datatransfer.DataFlavor[] transferFlavors -> transferFlavors
    javax.activation.DataContentHandler dataContentHandler -> dataContentHandler
    javax.activation.DataContentHandler factoryDCH -> factoryDCH
    javax.activation.DataContentHandlerFactory factory -> factory
    javax.activation.DataContentHandlerFactory oldFactory -> oldFactory
    java.lang.String shortType -> shortType
    javax.activation.CommandMap getCommandMap() -> getCommandMap
    javax.activation.DataSource getDataSource() -> getDataSource
    java.lang.String getName() -> getName
    java.lang.String getContentType() -> getContentType
    java.io.InputStream getInputStream() -> getInputStream
    void writeTo(java.io.OutputStream) -> writeTo
    java.io.OutputStream getOutputStream() -> getOutputStream
    myjava.awt.datatransfer.DataFlavor[] getTransferDataFlavors() -> getTransferDataFlavors
    boolean isDataFlavorSupported(myjava.awt.datatransfer.DataFlavor) -> isDataFlavorSupported
    java.lang.Object getTransferData(myjava.awt.datatransfer.DataFlavor) -> getTransferData
    void setCommandMap(javax.activation.CommandMap) -> setCommandMap
    javax.activation.CommandInfo[] getPreferredCommands() -> getPreferredCommands
    javax.activation.CommandInfo[] getAllCommands() -> getAllCommands
    javax.activation.CommandInfo getCommand(java.lang.String) -> getCommand
    java.lang.Object getContent() -> getContent
    java.lang.Object getBean(javax.activation.CommandInfo) -> getBean
    javax.activation.DataContentHandler getDataContentHandler() -> getDataContentHandler
    java.lang.String getBaseType() -> getBaseType
    void setDataContentHandlerFactory(javax.activation.DataContentHandlerFactory) -> setDataContentHandlerFactory
    java.lang.Object access$0(javax.activation.DataHandler) -> a
    java.lang.String access$1(javax.activation.DataHandler) -> b
javax.activation.DataHandler$1 -> javax.activation.DataHandler$1:
    javax.activation.DataHandler this$0 -> a
    java.io.PipedOutputStream val$pos -> val$pos
    javax.activation.DataContentHandler val$fdch -> val$fdch
    void run() -> run
javax.activation.DataHandlerDataSource -> javax.activation.DataHandlerDataSource:
    javax.activation.DataHandler dataHandler -> a
    java.io.InputStream getInputStream() -> getInputStream
    java.io.OutputStream getOutputStream() -> getOutputStream
    java.lang.String getContentType() -> getContentType
    java.lang.String getName() -> getName
javax.activation.DataSource -> javax.activation.DataSource:
    java.io.InputStream getInputStream() -> getInputStream
    java.io.OutputStream getOutputStream() -> getOutputStream
    java.lang.String getContentType() -> getContentType
    java.lang.String getName() -> getName
javax.activation.DataSourceDataContentHandler -> javax.activation.DataSourceDataContentHandler:
    javax.activation.DataSource ds -> ds
    myjava.awt.datatransfer.DataFlavor[] transferFlavors -> transferFlavors
    javax.activation.DataContentHandler dch -> dch
    myjava.awt.datatransfer.DataFlavor[] getTransferDataFlavors() -> getTransferDataFlavors
    java.lang.Object getTransferData(myjava.awt.datatransfer.DataFlavor,javax.activation.DataSource) -> getTransferData
    java.lang.Object getContent(javax.activation.DataSource) -> getContent
    void writeTo(java.lang.Object,java.lang.String,java.io.OutputStream) -> writeTo
javax.activation.FileDataSource -> javax.activation.FileDataSource:
    java.io.File _file -> _file
    javax.activation.FileTypeMap typeMap -> typeMap
    java.io.InputStream getInputStream() -> getInputStream
    java.io.OutputStream getOutputStream() -> getOutputStream
    java.lang.String getContentType() -> getContentType
    java.lang.String getName() -> getName
    java.io.File getFile() -> getFile
    void setFileTypeMap(javax.activation.FileTypeMap) -> setFileTypeMap
javax.activation.FileTypeMap -> javax.activation.FileTypeMap:
    javax.activation.FileTypeMap defaultMap -> defaultMap
    java.lang.String getContentType(java.io.File) -> getContentType
    java.lang.String getContentType(java.lang.String) -> getContentType
    void setDefaultFileTypeMap(javax.activation.FileTypeMap) -> setDefaultFileTypeMap
    javax.activation.FileTypeMap getDefaultFileTypeMap() -> getDefaultFileTypeMap
javax.activation.MailcapCommandMap -> javax.activation.MailcapCommandMap:
    com.sun.activation.registries.MailcapFile defDB -> defDB
    com.sun.activation.registries.MailcapFile[] DB -> DB
    int PROG -> PROG
    com.sun.activation.registries.MailcapFile loadResource(java.lang.String) -> loadResource
    void loadAllResources(java.util.List,java.lang.String) -> loadAllResources
    com.sun.activation.registries.MailcapFile loadFile(java.lang.String) -> loadFile
    javax.activation.CommandInfo[] getPreferredCommands(java.lang.String) -> getPreferredCommands
    void appendPrefCmdsToList(java.util.Map,java.util.List) -> appendPrefCmdsToList
    boolean checkForVerb(java.util.List,java.lang.String) -> checkForVerb
    javax.activation.CommandInfo[] getAllCommands(java.lang.String) -> getAllCommands
    void appendCmdsToList(java.util.Map,java.util.List) -> appendCmdsToList
    javax.activation.CommandInfo getCommand(java.lang.String,java.lang.String) -> getCommand
    void addMailcap(java.lang.String) -> addMailcap
    javax.activation.DataContentHandler createDataContentHandler(java.lang.String) -> createDataContentHandler
    javax.activation.DataContentHandler getDataContentHandler(java.lang.String) -> getDataContentHandler
    java.lang.String[] getMimeTypes() -> getMimeTypes
    java.lang.String[] getNativeCommands(java.lang.String) -> getNativeCommands
javax.activation.MimeType -> javax.activation.MimeType:
    java.lang.String primaryType -> primaryType
    java.lang.String subType -> subType
    javax.activation.MimeTypeParameterList parameters -> parameters
    java.lang.String TSPECIALS -> TSPECIALS
    void parse(java.lang.String) -> parse
    java.lang.String getPrimaryType() -> getPrimaryType
    void setPrimaryType(java.lang.String) -> setPrimaryType
    java.lang.String getSubType() -> getSubType
    void setSubType(java.lang.String) -> setSubType
    javax.activation.MimeTypeParameterList getParameters() -> getParameters
    java.lang.String getParameter(java.lang.String) -> getParameter
    void setParameter(java.lang.String,java.lang.String) -> setParameter
    void removeParameter(java.lang.String) -> removeParameter
    java.lang.String toString() -> toString
    java.lang.String getBaseType() -> getBaseType
    boolean match(javax.activation.MimeType) -> match
    boolean match(java.lang.String) -> match
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    boolean isTokenChar(char) -> isTokenChar
    boolean isValidToken(java.lang.String) -> isValidToken
javax.activation.MimeTypeParameterList -> javax.activation.MimeTypeParameterList:
    java.util.Hashtable parameters -> parameters
    java.lang.String TSPECIALS -> TSPECIALS
    void parse(java.lang.String) -> parse
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.String get(java.lang.String) -> get
    void set(java.lang.String,java.lang.String) -> set
    void remove(java.lang.String) -> remove
    java.util.Enumeration getNames() -> getNames
    java.lang.String toString() -> toString
    boolean isTokenChar(char) -> isTokenChar
    int skipWhiteSpace(java.lang.String,int) -> skipWhiteSpace
    java.lang.String quote(java.lang.String) -> quote
    java.lang.String unquote(java.lang.String) -> unquote
javax.activation.MimeTypeParseException -> javax.activation.MimeTypeParseException:
javax.activation.MimetypesFileTypeMap -> javax.activation.MimetypesFileTypeMap:
    com.sun.activation.registries.MimeTypeFile defDB -> defDB
    com.sun.activation.registries.MimeTypeFile[] DB -> DB
    int PROG -> PROG
    java.lang.String defaultType -> defaultType
    com.sun.activation.registries.MimeTypeFile loadResource(java.lang.String) -> loadResource
    void loadAllResources(java.util.Vector,java.lang.String) -> loadAllResources
    com.sun.activation.registries.MimeTypeFile loadFile(java.lang.String) -> loadFile
    void addMimeTypes(java.lang.String) -> addMimeTypes
    java.lang.String getContentType(java.io.File) -> getContentType
    java.lang.String getContentType(java.lang.String) -> getContentType
javax.activation.ObjectDataContentHandler -> javax.activation.ObjectDataContentHandler:
    myjava.awt.datatransfer.DataFlavor[] transferFlavors -> transferFlavors
    java.lang.Object obj -> obj
    java.lang.String mimeType -> mimeType
    javax.activation.DataContentHandler dch -> dch
    javax.activation.DataContentHandler getDCH() -> getDCH
    myjava.awt.datatransfer.DataFlavor[] getTransferDataFlavors() -> getTransferDataFlavors
    java.lang.Object getTransferData(myjava.awt.datatransfer.DataFlavor,javax.activation.DataSource) -> getTransferData
    java.lang.Object getContent(javax.activation.DataSource) -> getContent
    void writeTo(java.lang.Object,java.lang.String,java.io.OutputStream) -> writeTo
javax.activation.SecuritySupport -> javax.activation.SecuritySupport:
    java.lang.ClassLoader getContextClassLoader() -> getContextClassLoader
    java.io.InputStream getResourceAsStream(java.lang.Class,java.lang.String) -> getResourceAsStream
    java.net.URL[] getResources(java.lang.ClassLoader,java.lang.String) -> getResources
    java.net.URL[] getSystemResources(java.lang.String) -> getSystemResources
    java.io.InputStream openStream(java.net.URL) -> openStream
javax.activation.SecuritySupport$1 -> javax.activation.SecuritySupport$1:
    java.lang.Object run() -> run
javax.activation.SecuritySupport$2 -> javax.activation.SecuritySupport$2:
    java.lang.Class val$c -> val$c
    java.lang.String val$name -> val$name
    java.lang.Object run() -> run
javax.activation.SecuritySupport$3 -> javax.activation.SecuritySupport$3:
    java.lang.ClassLoader val$cl -> val$cl
    java.lang.String val$name -> val$name
    java.lang.Object run() -> run
javax.activation.SecuritySupport$4 -> javax.activation.SecuritySupport$4:
    java.lang.String val$name -> val$name
    java.lang.Object run() -> run
javax.activation.SecuritySupport$5 -> javax.activation.SecuritySupport$5:
    java.net.URL val$url -> val$url
    java.lang.Object run() -> run
javax.activation.URLDataSource -> javax.activation.URLDataSource:
    java.net.URL url -> url
    java.net.URLConnection url_conn -> url_conn
    java.lang.String getContentType() -> getContentType
    java.lang.String getName() -> getName
    java.io.InputStream getInputStream() -> getInputStream
    java.io.OutputStream getOutputStream() -> getOutputStream
    java.net.URL getURL() -> getURL
javax.activation.UnsupportedDataTypeException -> javax.activation.UnsupportedDataTypeException:
javax.mail.Address -> javax.mail.Address:
    long serialVersionUID -> serialVersionUID
    java.lang.String getType() -> getType
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
javax.mail.AuthenticationFailedException -> javax.mail.AuthenticationFailedException:
    long serialVersionUID -> serialVersionUID
javax.mail.Authenticator -> javax.mail.Authenticator:
    java.net.InetAddress requestingSite -> requestingSite
    int requestingPort -> requestingPort
    java.lang.String requestingProtocol -> requestingProtocol
    java.lang.String requestingPrompt -> requestingPrompt
    java.lang.String requestingUserName -> requestingUserName
    void reset() -> reset
    javax.mail.PasswordAuthentication requestPasswordAuthentication(java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String) -> a
    java.net.InetAddress getRequestingSite() -> getRequestingSite
    int getRequestingPort() -> getRequestingPort
    java.lang.String getRequestingProtocol() -> getRequestingProtocol
    java.lang.String getRequestingPrompt() -> getRequestingPrompt
    java.lang.String getDefaultUserName() -> getDefaultUserName
    javax.mail.PasswordAuthentication getPasswordAuthentication() -> getPasswordAuthentication
javax.mail.BodyPart -> javax.mail.BodyPart:
    javax.mail.Multipart parent -> parent
    javax.mail.Multipart getParent() -> getParent
    void setParent(javax.mail.Multipart) -> a
javax.mail.EventQueue -> javax.mail.EventQueue:
    javax.mail.EventQueue$QueueElement head -> head
    javax.mail.EventQueue$QueueElement tail -> tail
    java.lang.Thread qThread -> qThread
    void enqueue(javax.mail.event.MailEvent,java.util.Vector) -> enqueue
    javax.mail.EventQueue$QueueElement dequeue() -> dequeue
    void run() -> run
javax.mail.EventQueue$QueueElement -> javax.mail.EventQueue$QueueElement:
    javax.mail.EventQueue$QueueElement next -> a
    javax.mail.EventQueue$QueueElement prev -> b
    javax.mail.event.MailEvent event -> c
    java.util.Vector vector -> d
javax.mail.FetchProfile -> javax.mail.FetchProfile:
    java.util.Vector specials -> specials
    java.util.Vector headers -> headers
    void add(javax.mail.FetchProfile$Item) -> add
    void add(java.lang.String) -> add
    boolean contains(javax.mail.FetchProfile$Item) -> contains
    boolean contains(java.lang.String) -> contains
    javax.mail.FetchProfile$Item[] getItems() -> getItems
    java.lang.String[] getHeaderNames() -> getHeaderNames
javax.mail.FetchProfile$Item -> javax.mail.FetchProfile$Item:
    javax.mail.FetchProfile$Item ENVELOPE -> ENVELOPE
    javax.mail.FetchProfile$Item CONTENT_INFO -> CONTENT_INFO
    javax.mail.FetchProfile$Item FLAGS -> FLAGS
    java.lang.String name -> name
javax.mail.Flags -> javax.mail.Flags:
    int system_flags -> system_flags
    java.util.Hashtable user_flags -> user_flags
    int ANSWERED_BIT -> ANSWERED_BIT
    int DELETED_BIT -> DELETED_BIT
    int DRAFT_BIT -> DRAFT_BIT
    int FLAGGED_BIT -> FLAGGED_BIT
    int RECENT_BIT -> RECENT_BIT
    int SEEN_BIT -> SEEN_BIT
    int USER_BIT -> USER_BIT
    long serialVersionUID -> serialVersionUID
    void add(javax.mail.Flags$Flag) -> add
    void add(java.lang.String) -> add
    void add(javax.mail.Flags) -> add
    void remove(javax.mail.Flags$Flag) -> remove
    void remove(java.lang.String) -> remove
    void remove(javax.mail.Flags) -> remove
    boolean contains(javax.mail.Flags$Flag) -> contains
    boolean contains(java.lang.String) -> contains
    boolean contains(javax.mail.Flags) -> contains
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    javax.mail.Flags$Flag[] getSystemFlags() -> getSystemFlags
    java.lang.String[] getUserFlags() -> getUserFlags
    java.lang.Object clone() -> clone
javax.mail.Flags$Flag -> javax.mail.Flags$Flag:
    javax.mail.Flags$Flag ANSWERED -> ANSWERED
    javax.mail.Flags$Flag DELETED -> DELETED
    javax.mail.Flags$Flag DRAFT -> DRAFT
    javax.mail.Flags$Flag FLAGGED -> FLAGGED
    javax.mail.Flags$Flag RECENT -> RECENT
    javax.mail.Flags$Flag SEEN -> SEEN
    javax.mail.Flags$Flag USER -> USER
    int bit -> bit
    int access$0(javax.mail.Flags$Flag) -> a
javax.mail.Folder -> javax.mail.Folder:
    javax.mail.Store store -> store
    int mode -> mode
    int HOLDS_MESSAGES -> HOLDS_MESSAGES
    int HOLDS_FOLDERS -> HOLDS_FOLDERS
    int READ_ONLY -> READ_ONLY
    int READ_WRITE -> READ_WRITE
    java.util.Vector connectionListeners -> connectionListeners
    java.util.Vector folderListeners -> folderListeners
    java.util.Vector messageCountListeners -> messageCountListeners
    java.util.Vector messageChangedListeners -> messageChangedListeners
    javax.mail.EventQueue q -> q
    java.lang.Object qLock -> qLock
    java.lang.String getName() -> getName
    java.lang.String getFullName() -> getFullName
    javax.mail.URLName getURLName() -> getURLName
    javax.mail.Store getStore() -> getStore
    javax.mail.Folder getParent() -> getParent
    boolean exists() -> exists
    javax.mail.Folder[] list(java.lang.String) -> list
    javax.mail.Folder[] listSubscribed(java.lang.String) -> listSubscribed
    javax.mail.Folder[] list() -> list
    javax.mail.Folder[] listSubscribed() -> listSubscribed
    char getSeparator() -> getSeparator
    int getType() -> getType
    boolean create(int) -> create
    boolean isSubscribed() -> isSubscribed
    void setSubscribed(boolean) -> setSubscribed
    boolean hasNewMessages() -> hasNewMessages
    javax.mail.Folder getFolder(java.lang.String) -> getFolder
    boolean delete(boolean) -> delete
    boolean renameTo(javax.mail.Folder) -> renameTo
    void open(int) -> open
    void close(boolean) -> close
    boolean isOpen() -> isOpen
    int getMode() -> getMode
    javax.mail.Flags getPermanentFlags() -> getPermanentFlags
    int getMessageCount() -> getMessageCount
    int getNewMessageCount() -> getNewMessageCount
    int getUnreadMessageCount() -> getUnreadMessageCount
    int getDeletedMessageCount() -> getDeletedMessageCount
    javax.mail.Message getMessage(int) -> getMessage
    javax.mail.Message[] getMessages(int,int) -> getMessages
    javax.mail.Message[] getMessages(int[]) -> getMessages
    javax.mail.Message[] getMessages() -> getMessages
    void appendMessages(javax.mail.Message[]) -> appendMessages
    void fetch(javax.mail.Message[],javax.mail.FetchProfile) -> fetch
    void setFlags(javax.mail.Message[],javax.mail.Flags,boolean) -> setFlags
    void setFlags(int,int,javax.mail.Flags,boolean) -> setFlags
    void setFlags(int[],javax.mail.Flags,boolean) -> setFlags
    void copyMessages(javax.mail.Message[],javax.mail.Folder) -> copyMessages
    javax.mail.Message[] expunge() -> expunge
    javax.mail.Message[] search(javax.mail.search.SearchTerm) -> search
    javax.mail.Message[] search(javax.mail.search.SearchTerm,javax.mail.Message[]) -> search
    void addConnectionListener(javax.mail.event.ConnectionListener) -> addConnectionListener
    void removeConnectionListener(javax.mail.event.ConnectionListener) -> removeConnectionListener
    void notifyConnectionListeners(int) -> notifyConnectionListeners
    void addFolderListener(javax.mail.event.FolderListener) -> addFolderListener
    void removeFolderListener(javax.mail.event.FolderListener) -> removeFolderListener
    void notifyFolderListeners(int) -> notifyFolderListeners
    void notifyFolderRenamedListeners(javax.mail.Folder) -> notifyFolderRenamedListeners
    void addMessageCountListener(javax.mail.event.MessageCountListener) -> addMessageCountListener
    void removeMessageCountListener(javax.mail.event.MessageCountListener) -> removeMessageCountListener
    void notifyMessageAddedListeners(javax.mail.Message[]) -> notifyMessageAddedListeners
    void notifyMessageRemovedListeners(boolean,javax.mail.Message[]) -> notifyMessageRemovedListeners
    void addMessageChangedListener(javax.mail.event.MessageChangedListener) -> addMessageChangedListener
    void removeMessageChangedListener(javax.mail.event.MessageChangedListener) -> removeMessageChangedListener
    void notifyMessageChangedListeners(int,javax.mail.Message) -> notifyMessageChangedListeners
    void queueEvent(javax.mail.event.MailEvent,java.util.Vector) -> queueEvent
    void terminateQueue() -> terminateQueue
    void finalize() -> finalize
    java.lang.String toString() -> toString
javax.mail.Folder$TerminatorEvent -> javax.mail.Folder$TerminatorEvent:
    long serialVersionUID -> serialVersionUID
    void dispatch(java.lang.Object) -> dispatch
javax.mail.FolderClosedException -> javax.mail.FolderClosedException:
    javax.mail.Folder folder -> folder
    long serialVersionUID -> serialVersionUID
    javax.mail.Folder getFolder() -> getFolder
javax.mail.FolderNotFoundException -> javax.mail.FolderNotFoundException:
    javax.mail.Folder folder -> folder
    long serialVersionUID -> serialVersionUID
    javax.mail.Folder getFolder() -> getFolder
javax.mail.Header -> javax.mail.Header:
    java.lang.String name -> name
    java.lang.String value -> value
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
javax.mail.IllegalWriteException -> javax.mail.IllegalWriteException:
    long serialVersionUID -> serialVersionUID
javax.mail.Message -> javax.mail.Message:
    int msgnum -> msgnum
    boolean expunged -> expunged
    javax.mail.Folder folder -> folder
    javax.mail.Session session -> session
    javax.mail.Address[] getFrom() -> getFrom
    void setFrom() -> setFrom
    void setFrom(javax.mail.Address) -> setFrom
    void addFrom(javax.mail.Address[]) -> addFrom
    javax.mail.Address[] getRecipients(javax.mail.Message$RecipientType) -> getRecipients
    javax.mail.Address[] getAllRecipients() -> getAllRecipients
    void setRecipients(javax.mail.Message$RecipientType,javax.mail.Address[]) -> setRecipients
    void setRecipient(javax.mail.Message$RecipientType,javax.mail.Address) -> setRecipient
    void addRecipients(javax.mail.Message$RecipientType,javax.mail.Address[]) -> addRecipients
    void addRecipient(javax.mail.Message$RecipientType,javax.mail.Address) -> addRecipient
    javax.mail.Address[] getReplyTo() -> getReplyTo
    void setReplyTo(javax.mail.Address[]) -> setReplyTo
    java.lang.String getSubject() -> getSubject
    void setSubject(java.lang.String) -> setSubject
    java.util.Date getSentDate() -> getSentDate
    void setSentDate(java.util.Date) -> setSentDate
    java.util.Date getReceivedDate() -> getReceivedDate
    javax.mail.Flags getFlags() -> getFlags
    boolean isSet(javax.mail.Flags$Flag) -> isSet
    void setFlags(javax.mail.Flags,boolean) -> setFlags
    void setFlag(javax.mail.Flags$Flag,boolean) -> setFlag
    int getMessageNumber() -> getMessageNumber
    void setMessageNumber(int) -> setMessageNumber
    javax.mail.Folder getFolder() -> getFolder
    boolean isExpunged() -> isExpunged
    void setExpunged(boolean) -> setExpunged
    javax.mail.Message reply(boolean) -> reply
    void saveChanges() -> saveChanges
    boolean match(javax.mail.search.SearchTerm) -> match
javax.mail.Message$RecipientType -> javax.mail.Message$RecipientType:
    javax.mail.Message$RecipientType TO -> TO
    javax.mail.Message$RecipientType CC -> CC
    javax.mail.Message$RecipientType BCC -> BCC
    java.lang.String type -> type
    long serialVersionUID -> serialVersionUID
    java.lang.Object readResolve() -> readResolve
    java.lang.String toString() -> toString
javax.mail.MessageAware -> javax.mail.MessageAware:
    javax.mail.MessageContext getMessageContext() -> getMessageContext
javax.mail.MessageContext -> javax.mail.MessageContext:
    javax.mail.Part part -> part
    javax.mail.Part getPart() -> getPart
    javax.mail.Message getMessage() -> getMessage
    javax.mail.Message getMessage(javax.mail.Part) -> getMessage
    javax.mail.Session getSession() -> getSession
javax.mail.MessageRemovedException -> javax.mail.MessageRemovedException:
    long serialVersionUID -> serialVersionUID
javax.mail.MessagingException -> javax.mail.MessagingException:
    java.lang.Exception next -> next
    long serialVersionUID -> serialVersionUID
    java.lang.Exception getNextException() -> getNextException
    java.lang.Throwable getCause() -> getCause
    boolean setNextException(java.lang.Exception) -> setNextException
    java.lang.String toString() -> toString
    java.lang.String superToString() -> superToString
javax.mail.MethodNotSupportedException -> javax.mail.MethodNotSupportedException:
    long serialVersionUID -> serialVersionUID
javax.mail.Multipart -> javax.mail.Multipart:
    java.util.Vector parts -> parts
    java.lang.String contentType -> contentType
    javax.mail.Part parent -> parent
    void setMultipartDataSource(javax.mail.MultipartDataSource) -> setMultipartDataSource
    java.lang.String getContentType() -> getContentType
    int getCount() -> getCount
    javax.mail.BodyPart getBodyPart(int) -> getBodyPart
    boolean removeBodyPart(javax.mail.BodyPart) -> removeBodyPart
    void removeBodyPart(int) -> removeBodyPart
    void addBodyPart(javax.mail.BodyPart) -> addBodyPart
    void addBodyPart(javax.mail.BodyPart,int) -> addBodyPart
    void writeTo(java.io.OutputStream) -> writeTo
    javax.mail.Part getParent() -> getParent
    void setParent(javax.mail.Part) -> setParent
javax.mail.MultipartDataSource -> javax.mail.MultipartDataSource:
    int getCount() -> getCount
    javax.mail.BodyPart getBodyPart(int) -> getBodyPart
javax.mail.NoSuchProviderException -> javax.mail.NoSuchProviderException:
    long serialVersionUID -> serialVersionUID
javax.mail.Part -> javax.mail.Part:
    java.lang.String ATTACHMENT -> ATTACHMENT
    java.lang.String INLINE -> INLINE
    int getSize() -> getSize
    int getLineCount() -> getLineCount
    java.lang.String getContentType() -> getContentType
    boolean isMimeType(java.lang.String) -> isMimeType
    java.lang.String getDisposition() -> getDisposition
    void setDisposition(java.lang.String) -> setDisposition
    java.lang.String getDescription() -> getDescription
    void setDescription(java.lang.String) -> setDescription
    java.lang.String getFileName() -> getFileName
    void setFileName(java.lang.String) -> setFileName
    java.io.InputStream getInputStream() -> getInputStream
    javax.activation.DataHandler getDataHandler() -> getDataHandler
    java.lang.Object getContent() -> getContent
    void setDataHandler(javax.activation.DataHandler) -> setDataHandler
    void setContent(java.lang.Object,java.lang.String) -> setContent
    void setText(java.lang.String) -> setText
    void setContent(javax.mail.Multipart) -> setContent
    void writeTo(java.io.OutputStream) -> writeTo
    java.lang.String[] getHeader(java.lang.String) -> getHeader
    void setHeader(java.lang.String,java.lang.String) -> setHeader
    void addHeader(java.lang.String,java.lang.String) -> addHeader
    void removeHeader(java.lang.String) -> removeHeader
    java.util.Enumeration getAllHeaders() -> getAllHeaders
    java.util.Enumeration getMatchingHeaders(java.lang.String[]) -> getMatchingHeaders
    java.util.Enumeration getNonMatchingHeaders(java.lang.String[]) -> getNonMatchingHeaders
javax.mail.PasswordAuthentication -> javax.mail.PasswordAuthentication:
    java.lang.String userName -> userName
    java.lang.String password -> password
    java.lang.String getUserName() -> getUserName
    java.lang.String getPassword() -> getPassword
javax.mail.Provider -> javax.mail.Provider:
    javax.mail.Provider$Type type -> type
    java.lang.String protocol -> protocol
    java.lang.String className -> className
    java.lang.String vendor -> vendor
    java.lang.String version -> version
    javax.mail.Provider$Type getType() -> getType
    java.lang.String getProtocol() -> getProtocol
    java.lang.String getClassName() -> getClassName
    java.lang.String getVendor() -> getVendor
    java.lang.String getVersion() -> getVersion
    java.lang.String toString() -> toString
javax.mail.Provider$Type -> javax.mail.Provider$Type:
    javax.mail.Provider$Type STORE -> STORE
    javax.mail.Provider$Type TRANSPORT -> TRANSPORT
    java.lang.String type -> type
    java.lang.String toString() -> toString
javax.mail.Quota -> javax.mail.Quota:
    java.lang.String quotaRoot -> quotaRoot
    javax.mail.Quota$Resource[] resources -> resources
    void setResourceLimit(java.lang.String,long) -> setResourceLimit
javax.mail.Quota$Resource -> javax.mail.Quota$Resource:
    java.lang.String name -> name
    long usage -> usage
    long limit -> limit
javax.mail.QuotaAwareStore -> javax.mail.QuotaAwareStore:
    javax.mail.Quota[] getQuota(java.lang.String) -> getQuota
    void setQuota(javax.mail.Quota) -> setQuota
javax.mail.ReadOnlyFolderException -> javax.mail.ReadOnlyFolderException:
    javax.mail.Folder folder -> folder
    long serialVersionUID -> serialVersionUID
    javax.mail.Folder getFolder() -> getFolder
javax.mail.SendFailedException -> javax.mail.SendFailedException:
    javax.mail.Address[] invalid -> invalid
    javax.mail.Address[] validSent -> validSent
    javax.mail.Address[] validUnsent -> validUnsent
    long serialVersionUID -> serialVersionUID
    javax.mail.Address[] getValidSentAddresses() -> getValidSentAddresses
    javax.mail.Address[] getValidUnsentAddresses() -> getValidUnsentAddresses
    javax.mail.Address[] getInvalidAddresses() -> getInvalidAddresses
javax.mail.Service -> javax.mail.Service:
    javax.mail.Session session -> session
    javax.mail.URLName url -> url
    boolean debug -> debug
    boolean connected -> connected
    java.util.Vector connectionListeners -> connectionListeners
    javax.mail.EventQueue q -> q
    java.lang.Object qLock -> qLock
    void connect() -> connect
    void connect(java.lang.String,java.lang.String,java.lang.String) -> connect
    void connect(java.lang.String,java.lang.String) -> connect
    void connect(java.lang.String,int,java.lang.String,java.lang.String) -> connect
    boolean protocolConnect(java.lang.String,int,java.lang.String,java.lang.String) -> protocolConnect
    boolean isConnected() -> isConnected
    void setConnected(boolean) -> setConnected
    void close() -> close
    javax.mail.URLName getURLName() -> getURLName
    void setURLName(javax.mail.URLName) -> setURLName
    void addConnectionListener(javax.mail.event.ConnectionListener) -> addConnectionListener
    void removeConnectionListener(javax.mail.event.ConnectionListener) -> removeConnectionListener
    void notifyConnectionListeners(int) -> notifyConnectionListeners
    java.lang.String toString() -> toString
    void queueEvent(javax.mail.event.MailEvent,java.util.Vector) -> queueEvent
    void terminateQueue() -> terminateQueue
    void finalize() -> finalize
javax.mail.Service$TerminatorEvent -> javax.mail.Service$TerminatorEvent:
    long serialVersionUID -> serialVersionUID
    void dispatch(java.lang.Object) -> dispatch
javax.mail.Session -> javax.mail.Session:
    java.util.Properties props -> props
    javax.mail.Authenticator authenticator -> authenticator
    java.util.Hashtable authTable -> authTable
    boolean debug -> debug
    java.io.PrintStream out -> out
    java.util.Vector providers -> providers
    java.util.Hashtable providersByProtocol -> providersByProtocol
    java.util.Hashtable providersByClassName -> providersByClassName
    java.util.Properties addressMap -> addressMap
    javax.mail.Session defaultSession -> defaultSession
    javax.mail.Session getInstance(java.util.Properties,javax.mail.Authenticator) -> getInstance
    javax.mail.Session getInstance(java.util.Properties) -> getInstance
    javax.mail.Session getDefaultInstance(java.util.Properties,javax.mail.Authenticator) -> getDefaultInstance
    javax.mail.Session getDefaultInstance(java.util.Properties) -> getDefaultInstance
    void setDebug(boolean) -> setDebug
    boolean getDebug() -> getDebug
    void setDebugOut(java.io.PrintStream) -> setDebugOut
    java.io.PrintStream getDebugOut() -> getDebugOut
    javax.mail.Provider[] getProviders() -> getProviders
    javax.mail.Provider getProvider(java.lang.String) -> getProvider
    void setProvider(javax.mail.Provider) -> setProvider
    javax.mail.Store getStore() -> getStore
    javax.mail.Store getStore(java.lang.String) -> getStore
    javax.mail.Store getStore(javax.mail.URLName) -> getStore
    javax.mail.Store getStore(javax.mail.Provider) -> getStore
    javax.mail.Store getStore(javax.mail.Provider,javax.mail.URLName) -> getStore
    javax.mail.Folder getFolder(javax.mail.URLName) -> getFolder
    javax.mail.Transport getTransport() -> getTransport
    javax.mail.Transport getTransport(java.lang.String) -> getTransport
    javax.mail.Transport getTransport(javax.mail.URLName) -> getTransport
    javax.mail.Transport getTransport(javax.mail.Provider) -> getTransport
    javax.mail.Transport getTransport(javax.mail.Address) -> getTransport
    javax.mail.Transport getTransport(javax.mail.Provider,javax.mail.URLName) -> getTransport
    java.lang.Object getService(javax.mail.Provider,javax.mail.URLName) -> getService
    void setPasswordAuthentication(javax.mail.URLName,javax.mail.PasswordAuthentication) -> setPasswordAuthentication
    javax.mail.PasswordAuthentication getPasswordAuthentication(javax.mail.URLName) -> getPasswordAuthentication
    javax.mail.PasswordAuthentication requestPasswordAuthentication(java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String) -> requestPasswordAuthentication
    java.util.Properties getProperties() -> getProperties
    java.lang.String getProperty(java.lang.String) -> getProperty
    void loadProviders(java.lang.Class) -> loadProviders
    void loadProvidersFromStream(java.io.InputStream) -> loadProvidersFromStream
    void addProvider(javax.mail.Provider) -> addProvider
    void loadAddressMap(java.lang.Class) -> loadAddressMap
    void setProtocolForAddress(java.lang.String,java.lang.String) -> setProtocolForAddress
    void loadFile(java.lang.String,javax.mail.StreamLoader) -> loadFile
    void loadResource(java.lang.String,java.lang.Class,javax.mail.StreamLoader) -> loadResource
    void loadAllResources(java.lang.String,java.lang.Class,javax.mail.StreamLoader) -> loadAllResources
    void pr(java.lang.String) -> pr
    java.lang.ClassLoader getContextClassLoader() -> getContextClassLoader
    java.io.InputStream getResourceAsStream(java.lang.Class,java.lang.String) -> getResourceAsStream
    java.net.URL[] getResources(java.lang.ClassLoader,java.lang.String) -> getResources
    java.net.URL[] getSystemResources(java.lang.String) -> getSystemResources
    java.io.InputStream openStream(java.net.URL) -> openStream
    void access$0(javax.mail.Session,java.io.InputStream) -> a
    java.util.Properties access$1(javax.mail.Session) -> a
javax.mail.Session$1 -> javax.mail.Session$1:
    javax.mail.Session this$0 -> a
    void load(java.io.InputStream) -> load
javax.mail.Session$2 -> javax.mail.Session$2:
    javax.mail.Session this$0 -> a
    void load(java.io.InputStream) -> load
javax.mail.Session$3 -> javax.mail.Session$3:
    java.lang.Object run() -> run
javax.mail.Session$4 -> javax.mail.Session$4:
    java.lang.Class val$c -> val$c
    java.lang.String val$name -> val$name
    java.lang.Object run() -> run
javax.mail.Session$5 -> javax.mail.Session$5:
    java.lang.ClassLoader val$cl -> val$cl
    java.lang.String val$name -> val$name
    java.lang.Object run() -> run
javax.mail.Session$6 -> javax.mail.Session$6:
    java.lang.String val$name -> val$name
    java.lang.Object run() -> run
javax.mail.Session$7 -> javax.mail.Session$7:
    java.net.URL val$url -> val$url
    java.lang.Object run() -> run
javax.mail.Store -> javax.mail.Store:
    java.util.Vector storeListeners -> storeListeners
    java.util.Vector folderListeners -> folderListeners
    javax.mail.Folder getDefaultFolder() -> getDefaultFolder
    javax.mail.Folder getFolder(java.lang.String) -> getFolder
    javax.mail.Folder getFolder(javax.mail.URLName) -> getFolder
    javax.mail.Folder[] getPersonalNamespaces() -> getPersonalNamespaces
    javax.mail.Folder[] getUserNamespaces(java.lang.String) -> getUserNamespaces
    javax.mail.Folder[] getSharedNamespaces() -> getSharedNamespaces
    void addStoreListener(javax.mail.event.StoreListener) -> addStoreListener
    void removeStoreListener(javax.mail.event.StoreListener) -> removeStoreListener
    void notifyStoreListeners(int,java.lang.String) -> notifyStoreListeners
    void addFolderListener(javax.mail.event.FolderListener) -> addFolderListener
    void removeFolderListener(javax.mail.event.FolderListener) -> removeFolderListener
    void notifyFolderListeners(int,javax.mail.Folder) -> notifyFolderListeners
    void notifyFolderRenamedListeners(javax.mail.Folder,javax.mail.Folder) -> notifyFolderRenamedListeners
javax.mail.StoreClosedException -> javax.mail.StoreClosedException:
    javax.mail.Store store -> store
    long serialVersionUID -> serialVersionUID
    javax.mail.Store getStore() -> getStore
javax.mail.StreamLoader -> javax.mail.StreamLoader:
    void load(java.io.InputStream) -> load
javax.mail.Transport -> javax.mail.Transport:
    java.util.Vector transportListeners -> transportListeners
    void send(javax.mail.Message) -> send
    void send(javax.mail.Message,javax.mail.Address[]) -> send
    void send0(javax.mail.Message,javax.mail.Address[]) -> send0
    void sendMessage(javax.mail.Message,javax.mail.Address[]) -> sendMessage
    void addTransportListener(javax.mail.event.TransportListener) -> addTransportListener
    void removeTransportListener(javax.mail.event.TransportListener) -> removeTransportListener
    void notifyTransportListeners(int,javax.mail.Address[],javax.mail.Address[],javax.mail.Address[],javax.mail.Message) -> notifyTransportListeners
javax.mail.UIDFolder -> javax.mail.UIDFolder:
    long LASTUID -> LASTUID
    long getUIDValidity() -> getUIDValidity
    javax.mail.Message getMessageByUID(long) -> getMessageByUID
    javax.mail.Message[] getMessagesByUID(long,long) -> getMessagesByUID
    javax.mail.Message[] getMessagesByUID(long[]) -> getMessagesByUID
    long getUID(javax.mail.Message) -> getUID
javax.mail.UIDFolder$FetchProfileItem -> javax.mail.UIDFolder$FetchProfileItem:
    javax.mail.UIDFolder$FetchProfileItem UID -> UID
javax.mail.URLName -> javax.mail.URLName:
    java.lang.String fullURL -> fullURL
    java.lang.String protocol -> protocol
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String host -> host
    java.net.InetAddress hostAddress -> hostAddress
    boolean hostAddressKnown -> hostAddressKnown
    int port -> port
    java.lang.String file -> file
    java.lang.String ref -> ref
    int hashCode -> hashCode
    boolean doEncode -> doEncode
    java.util.BitSet dontNeedEncoding -> a
    java.lang.String toString() -> toString
    void parseString(java.lang.String) -> parseString
    int getPort() -> getPort
    java.lang.String getProtocol() -> getProtocol
    java.lang.String getFile() -> getFile
    java.lang.String getRef() -> getRef
    java.lang.String getHost() -> getHost
    java.lang.String getUsername() -> getUsername
    java.lang.String getPassword() -> getPassword
    java.net.URL getURL() -> getURL
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.net.InetAddress getHostAddress() -> getHostAddress
    java.lang.String encode(java.lang.String) -> a
    java.lang.String _encode(java.lang.String) -> _encode
    java.lang.String decode(java.lang.String) -> b
    int indexOfAny(java.lang.String,java.lang.String) -> indexOfAny
    int indexOfAny(java.lang.String,java.lang.String,int) -> indexOfAny
javax.mail.Version -> javax.mail.Version:
    java.lang.String version -> version
javax.mail.event.ConnectionEvent -> javax.mail.a.g:
    int type -> a
    void dispatch(java.lang.Object) -> dispatch
javax.mail.event.ConnectionListener -> javax.mail.a.l:
    void opened(javax.mail.event.ConnectionEvent) -> a
    void disconnected(javax.mail.event.ConnectionEvent) -> b
    void closed(javax.mail.event.ConnectionEvent) -> c
javax.mail.event.FolderEvent -> javax.mail.a.f:
    int type -> a
    javax.mail.Folder folder -> b
    javax.mail.Folder newFolder -> c
    void dispatch(java.lang.Object) -> dispatch
javax.mail.event.FolderListener -> javax.mail.a.e:
    void folderCreated(javax.mail.event.FolderEvent) -> a
    void folderDeleted(javax.mail.event.FolderEvent) -> b
    void folderRenamed(javax.mail.event.FolderEvent) -> c
javax.mail.event.MailEvent -> javax.mail.a.k:
    long serialVersionUID -> serialVersionUID
    void dispatch(java.lang.Object) -> dispatch
javax.mail.event.MessageChangedEvent -> javax.mail.a.d:
    int type -> a
    javax.mail.Message msg -> b
    void dispatch(java.lang.Object) -> dispatch
javax.mail.event.MessageChangedListener -> javax.mail.a.b:
    void messageChanged(javax.mail.event.MessageChangedEvent) -> a
javax.mail.event.MessageCountEvent -> javax.mail.a.h:
    int type -> a
    boolean removed -> b
    javax.mail.Message[] msgs -> c
    void dispatch(java.lang.Object) -> dispatch
javax.mail.event.MessageCountListener -> javax.mail.a.i:
    void messagesAdded(javax.mail.event.MessageCountEvent) -> a
    void messagesRemoved(javax.mail.event.MessageCountEvent) -> b
javax.mail.event.StoreEvent -> javax.mail.a.m:
    int type -> a
    java.lang.String message -> b
    void dispatch(java.lang.Object) -> dispatch
javax.mail.event.StoreListener -> javax.mail.a.a:
    void notification(javax.mail.event.StoreEvent) -> a
javax.mail.event.TransportEvent -> javax.mail.a.j:
    int type -> a
    javax.mail.Address[] validSent -> b
    javax.mail.Address[] validUnsent -> c
    javax.mail.Address[] invalid -> d
    javax.mail.Message msg -> e
    void dispatch(java.lang.Object) -> dispatch
javax.mail.event.TransportListener -> javax.mail.a.c:
    void messageDelivered(javax.mail.event.TransportEvent) -> a
    void messageNotDelivered(javax.mail.event.TransportEvent) -> b
    void messagePartiallyDelivered(javax.mail.event.TransportEvent) -> c
javax.mail.internet.AddressException -> javax.mail.b.aa:
    java.lang.String ref -> a
    int pos -> b
    java.lang.String toString() -> toString
javax.mail.internet.AsciiOutputStream -> javax.mail.b.i:
    boolean breakOnNonAscii -> a
    int ascii -> b
    int non_ascii -> c
    int linelen -> d
    boolean longLine -> e
    boolean badEOL -> f
    boolean checkEOL -> g
    int lastb -> h
    int ret -> i
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void check(int) -> a
    int getAscii() -> a
javax.mail.internet.ContentDisposition -> javax.mail.b.h:
    java.lang.String disposition -> a
    javax.mail.internet.ParameterList list -> b
    java.lang.String getDisposition() -> a
    java.lang.String getParameter(java.lang.String) -> a
    void setDisposition(java.lang.String) -> b
    void setParameter(java.lang.String,java.lang.String) -> a
    java.lang.String toString() -> toString
javax.mail.internet.ContentType -> javax.mail.b.z:
    java.lang.String primaryType -> a
    java.lang.String subType -> b
    javax.mail.internet.ParameterList list -> c
    java.lang.String getPrimaryType() -> a
    java.lang.String getSubType() -> b
    java.lang.String getParameter(java.lang.String) -> a
    void setParameter(java.lang.String,java.lang.String) -> a
    java.lang.String toString() -> toString
    boolean match(javax.mail.internet.ContentType) -> a
    boolean match(java.lang.String) -> b
javax.mail.internet.HeaderTokenizer -> javax.mail.b.k:
    java.lang.String string -> a
    boolean skipComments -> b
    java.lang.String delimiters -> c
    int currentPos -> d
    int maxPos -> e
    int nextPos -> f
    int peekPos -> g
    javax.mail.internet.HeaderTokenizer$Token EOFToken -> h
    javax.mail.internet.HeaderTokenizer$Token next() -> a
    java.lang.String getRemainder() -> b
    javax.mail.internet.HeaderTokenizer$Token getNext() -> c
    int skipWhiteSpace() -> d
    java.lang.String filterToken(java.lang.String,int,int) -> a
javax.mail.internet.HeaderTokenizer$Token -> javax.mail.b.ab:
    int type -> a
    java.lang.String value -> b
    int getType() -> a
    java.lang.String getValue() -> b
javax.mail.internet.InternetAddress -> javax.mail.b.s:
    java.lang.String address -> a
    java.lang.String personal -> b
    java.lang.String encodedPersonal -> c
    java.lang.String rfc822phrase -> d
    java.lang.Object clone() -> clone
    java.lang.String getType() -> getType
    void setAddress(java.lang.String) -> a
    java.lang.String getAddress() -> a
    java.lang.String toString() -> toString
    java.lang.String quotePhrase(java.lang.String) -> b
    java.lang.String unquote(java.lang.String) -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString(javax.mail.Address[]) -> a
    java.lang.String toString(javax.mail.Address[],int) -> a
    int lengthOfFirstSegment(java.lang.String) -> d
    int lengthOfLastSegment(java.lang.String,int) -> a
    javax.mail.internet.InternetAddress getLocalAddress(javax.mail.Session) -> a
    javax.mail.internet.InternetAddress[] parse(java.lang.String,boolean) -> a
    javax.mail.internet.InternetAddress[] parseHeader(java.lang.String,boolean) -> b
    javax.mail.internet.InternetAddress[] parse(java.lang.String,boolean,boolean) -> a
    void checkAddress(java.lang.String,boolean,boolean) -> b
    boolean isSimple() -> c
    boolean isGroup() -> b
    javax.mail.internet.InternetAddress[] getGroup(boolean) -> a
    int indexOfAny(java.lang.String,java.lang.String) -> a
    int indexOfAny(java.lang.String,java.lang.String,int) -> a
javax.mail.internet.InternetHeaders -> javax.mail.b.n:
    java.util.List headers -> a
    void load(java.io.InputStream) -> a
    java.lang.String[] getHeader(java.lang.String) -> a
    java.lang.String getHeader(java.lang.String,java.lang.String) -> a
    void setHeader(java.lang.String,java.lang.String) -> b
    void addHeader(java.lang.String,java.lang.String) -> c
    void removeHeader(java.lang.String) -> b
    java.util.Enumeration getAllHeaders() -> a
    java.util.Enumeration getMatchingHeaders(java.lang.String[]) -> a
    java.util.Enumeration getNonMatchingHeaders(java.lang.String[]) -> b
    void addHeaderLine(java.lang.String) -> c
    java.util.Enumeration getNonMatchingHeaderLines(java.lang.String[]) -> c
javax.mail.internet.InternetHeaders$InternetHeader -> javax.mail.b.r:
    java.lang.String line -> a
    java.lang.String getValue() -> getValue
javax.mail.internet.InternetHeaders$matchEnum -> javax.mail.b.d:
    java.util.Iterator e -> a
    java.lang.String[] names -> b
    boolean match -> c
    boolean want_line -> d
    javax.mail.internet.InternetHeaders$InternetHeader next_header -> e
    boolean hasMoreElements() -> hasMoreElements
    java.lang.Object nextElement() -> nextElement
    javax.mail.internet.InternetHeaders$InternetHeader nextMatch() -> a
javax.mail.internet.MailDateFormat -> javax.mail.b.m:
    boolean debug -> a
    java.util.TimeZone tz -> b
    java.util.Calendar cal -> c
    java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition) -> format
    java.util.Date parse(java.lang.String,java.text.ParsePosition) -> parse
    java.util.Date parseDate(char[],java.text.ParsePosition,boolean) -> a
    java.util.Date ourUTC(int,int,int,int,int,int,int,boolean) -> a
    void setCalendar(java.util.Calendar) -> setCalendar
    void setNumberFormat(java.text.NumberFormat) -> setNumberFormat
javax.mail.internet.MailDateParser -> javax.mail.b.x:
    int index -> a
    char[] orig -> b
    void skipUntilNumber() -> a
    void skipWhiteSpace() -> b
    void skipChar(char) -> a
    boolean skipIfChar(char) -> b
    int parseNumber() -> c
    int parseMonth() -> d
    int parseTimeZone() -> e
    int parseNumericTimeZone() -> f
    int parseAlphaTimeZone() -> g
    int getIndex() -> h
javax.mail.internet.MimeBodyPart -> javax.mail.b.c:
    boolean setDefaultTextCharset -> f
    boolean setContentTypeFileName -> g
    boolean encodeFileName -> h
    boolean decodeFileName -> i
    boolean cacheMultipart -> a
    javax.activation.DataHandler dh -> b
    byte[] content -> c
    java.io.InputStream contentStream -> d
    javax.mail.internet.InternetHeaders headers -> e
    java.lang.Object cachedContent -> j
    int getSize() -> getSize
    int getLineCount() -> getLineCount
    java.lang.String getContentType() -> getContentType
    boolean isMimeType(java.lang.String) -> isMimeType
    java.lang.String getDisposition() -> getDisposition
    void setDisposition(java.lang.String) -> setDisposition
    java.lang.String getEncoding() -> a
    java.lang.String getDescription() -> getDescription
    void setDescription(java.lang.String) -> setDescription
    void setDescription(java.lang.String,java.lang.String) -> a
    java.lang.String getFileName() -> getFileName
    void setFileName(java.lang.String) -> setFileName
    java.io.InputStream getInputStream() -> getInputStream
    java.io.InputStream getContentStream() -> b
    javax.activation.DataHandler getDataHandler() -> getDataHandler
    java.lang.Object getContent() -> getContent
    void setDataHandler(javax.activation.DataHandler) -> setDataHandler
    void setContent(java.lang.Object,java.lang.String) -> setContent
    void setText(java.lang.String) -> setText
    void setText(java.lang.String,java.lang.String) -> b
    void setContent(javax.mail.Multipart) -> setContent
    void writeTo(java.io.OutputStream) -> writeTo
    java.lang.String[] getHeader(java.lang.String) -> getHeader
    java.lang.String getHeader(java.lang.String,java.lang.String) -> c
    void setHeader(java.lang.String,java.lang.String) -> setHeader
    void addHeader(java.lang.String,java.lang.String) -> addHeader
    void removeHeader(java.lang.String) -> removeHeader
    java.util.Enumeration getAllHeaders() -> getAllHeaders
    java.util.Enumeration getMatchingHeaders(java.lang.String[]) -> getMatchingHeaders
    java.util.Enumeration getNonMatchingHeaders(java.lang.String[]) -> getNonMatchingHeaders
    java.util.Enumeration getNonMatchingHeaderLines(java.lang.String[]) -> a
    void updateHeaders() -> c
    boolean isMimeType(javax.mail.internet.MimePart,java.lang.String) -> a
    void setText(javax.mail.internet.MimePart,java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String getDisposition(javax.mail.internet.MimePart) -> a
    void setDisposition(javax.mail.internet.MimePart,java.lang.String) -> b
    java.lang.String getDescription(javax.mail.internet.MimePart) -> b
    void setDescription(javax.mail.internet.MimePart,java.lang.String,java.lang.String) -> a
    java.lang.String getFileName(javax.mail.internet.MimePart) -> c
    void setFileName(javax.mail.internet.MimePart,java.lang.String) -> c
    java.lang.String getEncoding(javax.mail.internet.MimePart) -> d
    void setEncoding(javax.mail.internet.MimePart,java.lang.String) -> d
    void updateHeaders(javax.mail.internet.MimePart) -> e
    void invalidateContentHeaders(javax.mail.internet.MimePart) -> f
    void writeTo(javax.mail.internet.MimePart,java.io.OutputStream,java.lang.String[]) -> a
javax.mail.internet.MimeMessage -> javax.mail.b.t:
    javax.activation.DataHandler dh -> a
    byte[] content -> b
    java.io.InputStream contentStream -> c
    javax.mail.internet.InternetHeaders headers -> d
    javax.mail.Flags flags -> e
    boolean modified -> f
    boolean saved -> g
    java.lang.Object cachedContent -> h
    javax.mail.internet.MailDateFormat mailDateFormat -> i
    boolean strict -> j
    javax.mail.Flags answeredFlag -> k
    void initStrict() -> e
    javax.mail.Address[] getFrom() -> getFrom
    void setFrom(javax.mail.Address) -> setFrom
    void setFrom() -> setFrom
    void addFrom(javax.mail.Address[]) -> addFrom
    javax.mail.Address[] getRecipients(javax.mail.Message$RecipientType) -> getRecipients
    javax.mail.Address[] getAllRecipients() -> getAllRecipients
    void setRecipients(javax.mail.Message$RecipientType,javax.mail.Address[]) -> setRecipients
    void addRecipients(javax.mail.Message$RecipientType,javax.mail.Address[]) -> addRecipients
    javax.mail.Address[] getReplyTo() -> getReplyTo
    void setReplyTo(javax.mail.Address[]) -> setReplyTo
    javax.mail.Address[] getAddressHeader(java.lang.String) -> a
    void setAddressHeader(java.lang.String,javax.mail.Address[]) -> a
    void addAddressHeader(java.lang.String,javax.mail.Address[]) -> b
    java.lang.String getSubject() -> getSubject
    void setSubject(java.lang.String) -> setSubject
    void setSubject(java.lang.String,java.lang.String) -> a
    java.util.Date getSentDate() -> getSentDate
    void setSentDate(java.util.Date) -> setSentDate
    java.util.Date getReceivedDate() -> getReceivedDate
    int getSize() -> getSize
    int getLineCount() -> getLineCount
    java.lang.String getContentType() -> getContentType
    boolean isMimeType(java.lang.String) -> isMimeType
    java.lang.String getDisposition() -> getDisposition
    void setDisposition(java.lang.String) -> setDisposition
    java.lang.String getEncoding() -> a
    java.lang.String getDescription() -> getDescription
    void setDescription(java.lang.String) -> setDescription
    void setDescription(java.lang.String,java.lang.String) -> b
    java.lang.String getFileName() -> getFileName
    void setFileName(java.lang.String) -> setFileName
    java.lang.String getHeaderName(javax.mail.Message$RecipientType) -> a
    java.io.InputStream getInputStream() -> getInputStream
    java.io.InputStream getContentStream() -> b
    javax.activation.DataHandler getDataHandler() -> getDataHandler
    java.lang.Object getContent() -> getContent
    void setDataHandler(javax.activation.DataHandler) -> setDataHandler
    void setContent(java.lang.Object,java.lang.String) -> setContent
    void setText(java.lang.String) -> setText
    void setText(java.lang.String,java.lang.String) -> d
    void setContent(javax.mail.Multipart) -> setContent
    javax.mail.Message reply(boolean) -> reply
    javax.mail.Address[] eliminateDuplicates(java.util.Vector,javax.mail.Address[]) -> a
    void writeTo(java.io.OutputStream) -> writeTo
    void writeTo(java.io.OutputStream,java.lang.String[]) -> a
    java.lang.String[] getHeader(java.lang.String) -> getHeader
    java.lang.String getHeader(java.lang.String,java.lang.String) -> c
    void setHeader(java.lang.String,java.lang.String) -> setHeader
    void addHeader(java.lang.String,java.lang.String) -> addHeader
    void removeHeader(java.lang.String) -> removeHeader
    java.util.Enumeration getAllHeaders() -> getAllHeaders
    java.util.Enumeration getMatchingHeaders(java.lang.String[]) -> getMatchingHeaders
    java.util.Enumeration getNonMatchingHeaders(java.lang.String[]) -> getNonMatchingHeaders
    java.util.Enumeration getNonMatchingHeaderLines(java.lang.String[]) -> a
    javax.mail.Flags getFlags() -> getFlags
    boolean isSet(javax.mail.Flags$Flag) -> isSet
    void setFlags(javax.mail.Flags,boolean) -> setFlags
    void saveChanges() -> saveChanges
    void updateMessageID() -> c
    void updateHeaders() -> d
    javax.mail.internet.MimeMessage createMimeMessage(javax.mail.Session) -> a
javax.mail.internet.MimeMessage$RecipientType -> javax.mail.b.q:
    javax.mail.internet.MimeMessage$RecipientType NEWSGROUPS -> a
    java.lang.Object readResolve() -> readResolve
javax.mail.internet.MimeMultipart -> javax.mail.b.a:
    boolean ignoreMissingEndBoundary -> c
    boolean ignoreMissingBoundaryParameter -> d
    boolean bmparse -> e
    javax.activation.DataSource ds -> a
    boolean parsed -> b
    boolean complete -> f
    java.lang.String preamble -> g
    int getCount() -> getCount
    javax.mail.BodyPart getBodyPart(int) -> getBodyPart
    boolean removeBodyPart(javax.mail.BodyPart) -> removeBodyPart
    void removeBodyPart(int) -> removeBodyPart
    void addBodyPart(javax.mail.BodyPart) -> addBodyPart
    void addBodyPart(javax.mail.BodyPart,int) -> addBodyPart
    void updateHeaders() -> a
    void writeTo(java.io.OutputStream) -> writeTo
    void parse() -> b
    void parsebm() -> c
    int readFully(java.io.InputStream,byte[],int,int) -> a
    void skipFully(java.io.InputStream,long) -> a
    javax.mail.internet.InternetHeaders createInternetHeaders(java.io.InputStream) -> a
    javax.mail.internet.MimeBodyPart createMimeBodyPart(javax.mail.internet.InternetHeaders,byte[]) -> a
    javax.mail.internet.MimeBodyPart createMimeBodyPart(java.io.InputStream) -> b
javax.mail.internet.MimePart -> javax.mail.b.o:
    java.lang.String getHeader(java.lang.String,java.lang.String) -> c
    java.util.Enumeration getNonMatchingHeaderLines(java.lang.String[]) -> a
    java.lang.String getEncoding() -> a
javax.mail.internet.MimePartDataSource -> javax.mail.b.e:
    javax.mail.internet.MimePart part -> a
    javax.mail.MessageContext context -> b
    boolean ignoreMultipartEncoding -> c
    java.io.InputStream getInputStream() -> getInputStream
    java.lang.String restrictEncoding(java.lang.String,javax.mail.internet.MimePart) -> a
    java.io.OutputStream getOutputStream() -> getOutputStream
    java.lang.String getContentType() -> getContentType
    java.lang.String getName() -> getName
    javax.mail.MessageContext getMessageContext() -> getMessageContext
javax.mail.internet.MimeUtility -> javax.mail.b.g:
    boolean decodeStrict -> a
    boolean encodeEolStrict -> b
    boolean foldEncodedWords -> c
    boolean foldText -> d
    java.lang.String defaultJavaCharset -> e
    java.lang.String defaultMIMECharset -> f
    java.util.Hashtable mime2java -> g
    java.util.Hashtable java2mime -> h
    java.lang.String getEncoding(javax.activation.DataSource) -> a
    java.lang.String getEncoding(javax.activation.DataHandler) -> a
    java.io.InputStream decode(java.io.InputStream,java.lang.String) -> a
    java.io.OutputStream encode(java.io.OutputStream,java.lang.String) -> a
    java.lang.String encodeText(java.lang.String) -> a
    java.lang.String encodeText(java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String decodeText(java.lang.String) -> b
    java.lang.String encodeWord(java.lang.String) -> c
    java.lang.String encodeWord(java.lang.String,java.lang.String,java.lang.String) -> b
    java.lang.String encodeWord(java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    void doEncode(java.lang.String,boolean,java.lang.String,int,java.lang.String,boolean,boolean,java.lang.StringBuffer) -> a
    java.lang.String decodeWord(java.lang.String) -> d
    java.lang.String decodeInnerWords(java.lang.String) -> i
    java.lang.String quote(java.lang.String,java.lang.String) -> a
    java.lang.String fold(int,java.lang.String) -> a
    java.lang.String unfold(java.lang.String) -> e
    int indexOfAny(java.lang.String,java.lang.String) -> b
    int indexOfAny(java.lang.String,java.lang.String,int) -> a
    java.lang.String javaCharset(java.lang.String) -> f
    java.lang.String mimeCharset(java.lang.String) -> g
    java.lang.String getDefaultJavaCharset() -> a
    java.lang.String getDefaultMIMECharset() -> b
    void loadMappings(com.sun.mail.util.LineInputStream,java.util.Hashtable) -> a
    int checkAscii(java.lang.String) -> h
    int checkAscii(java.io.InputStream,int,boolean) -> a
    boolean nonascii(int) -> a
javax.mail.internet.MimeUtility$1NullInputStream -> javax.mail.b.f:
    int read() -> read
javax.mail.internet.NewsAddress -> javax.mail.b.y:
    java.lang.String newsgroup -> a
    java.lang.String host -> b
    java.lang.String getType() -> getType
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString(javax.mail.Address[]) -> a
    javax.mail.internet.NewsAddress[] parse(java.lang.String) -> a
javax.mail.internet.ParameterList -> javax.mail.b.u:
    java.util.Map list -> a
    java.util.Set multisegmentNames -> b
    java.util.Map slist -> c
    java.lang.String lastName -> d
    boolean encodeParameters -> e
    boolean decodeParameters -> f
    boolean decodeParametersStrict -> g
    boolean applehack -> h
    char[] hex -> i
    void putEncodedName(java.lang.String,java.lang.String) -> b
    void combineMultisegmentNames(boolean) -> a
    java.lang.String get(java.lang.String) -> a
    void set(java.lang.String,java.lang.String) -> a
    java.lang.String toString() -> toString
    java.lang.String toString(int) -> a
    java.lang.String quote(java.lang.String) -> c
    javax.mail.internet.ParameterList$Value decodeValue(java.lang.String) -> d
    java.lang.String decodeBytes(java.lang.String,java.lang.String) -> c
    java.lang.String access$0(java.lang.String) -> b
javax.mail.internet.ParameterList$MultiValue -> javax.mail.b.j:
    java.lang.String value -> a
javax.mail.internet.ParameterList$ToStringBuffer -> javax.mail.b.p:
    int used -> a
    java.lang.StringBuffer sb -> b
    void addNV(java.lang.String,java.lang.String) -> a
    java.lang.String toString() -> toString
javax.mail.internet.ParameterList$Value -> javax.mail.b.b:
    java.lang.String value -> a
    java.lang.String charset -> b
    java.lang.String encodedValue -> c
javax.mail.internet.ParseException -> javax.mail.b.w:
javax.mail.internet.SharedInputStream -> javax.mail.b.l:
    long getPosition() -> a
    java.io.InputStream newStream(long,long) -> a
javax.mail.internet.UniqueValue -> javax.mail.b.v:
    int id -> a
    java.lang.String getUniqueBoundaryValue() -> a
    java.lang.String getUniqueMessageIDValue(javax.mail.Session) -> a
    int getUniqueId() -> b
javax.mail.search.SearchTerm -> javax.mail.c.a:
    boolean match(javax.mail.Message) -> a
javax.mail.util.SharedByteArrayInputStream -> javax.mail.d.a:
    int start -> a
    long getPosition() -> a
    java.io.InputStream newStream(long,long) -> a
myjava.awt.datatransfer.DataFlavor -> a.a.a.d:
    long serialVersionUID -> serialVersionUID
    myjava.awt.datatransfer.DataFlavor plainTextFlavor -> plainTextFlavor
    myjava.awt.datatransfer.DataFlavor stringFlavor -> stringFlavor
    myjava.awt.datatransfer.DataFlavor javaFileListFlavor -> javaFileListFlavor
    java.lang.String javaJVMLocalObjectMimeType -> javaJVMLocalObjectMimeType
    java.lang.String javaRemoteObjectMimeType -> javaRemoteObjectMimeType
    java.lang.String javaSerializedObjectMimeType -> javaSerializedObjectMimeType
    java.lang.String[] sortedTextFlavors -> sortedTextFlavors
    myjava.awt.datatransfer.DataFlavor plainUnicodeFlavor -> plainUnicodeFlavor
    java.lang.String humanPresentableName -> humanPresentableName
    java.lang.Class representationClass -> representationClass
    myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo -> mimeInfo
    myjava.awt.datatransfer.DataFlavor getTextPlainUnicodeFlavor() -> getTextPlainUnicodeFlavor
    java.lang.Class tryToLoadClass(java.lang.String,java.lang.ClassLoader) -> tryToLoadClass
    boolean isCharsetSupported(java.lang.String) -> isCharsetSupported
    void init(java.lang.String,java.lang.String,java.lang.ClassLoader) -> init
    java.lang.String getCharset() -> getCharset
    boolean isCharsetRequired() -> isCharsetRequired
    boolean isCharsetRedundant() -> isCharsetRedundant
    java.lang.String getPrimaryType() -> getPrimaryType
    java.lang.String getSubType() -> getSubType
    java.lang.String getMimeType() -> getMimeType
    java.lang.String getParameter(java.lang.String) -> getParameter
    java.lang.String getHumanPresentableName() -> getHumanPresentableName
    void setHumanPresentableName(java.lang.String) -> setHumanPresentableName
    java.lang.Class getRepresentationClass() -> getRepresentationClass
    java.lang.Class getDefaultRepresentationClass() -> getDefaultRepresentationClass
    java.lang.String getDefaultRepresentationClassAsString() -> getDefaultRepresentationClassAsString
    boolean isRepresentationClassSerializable() -> isRepresentationClassSerializable
    boolean isRepresentationClassRemote() -> isRepresentationClassRemote
    boolean isRepresentationClassReader() -> isRepresentationClassReader
    boolean isRepresentationClassInputStream() -> isRepresentationClassInputStream
    boolean isRepresentationClassCharBuffer() -> isRepresentationClassCharBuffer
    boolean isRepresentationClassByteBuffer() -> isRepresentationClassByteBuffer
    java.lang.String normalizeMimeTypeParameter(java.lang.String,java.lang.String) -> normalizeMimeTypeParameter
    java.lang.String normalizeMimeType(java.lang.String) -> normalizeMimeType
    boolean isMimeTypeEqual(myjava.awt.datatransfer.DataFlavor) -> isMimeTypeEqual
    boolean isMimeTypeEqual(java.lang.String) -> isMimeTypeEqual
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    java.lang.Object clone() -> clone
    java.lang.String toString() -> toString
    boolean isMimeTypeSerializedObject() -> isMimeTypeSerializedObject
    boolean equals(java.lang.Object) -> equals
    boolean equals(myjava.awt.datatransfer.DataFlavor) -> equals
    boolean equals(java.lang.String) -> equals
    boolean match(myjava.awt.datatransfer.DataFlavor) -> match
    int hashCode() -> hashCode
    java.lang.String getKeyInfo() -> getKeyInfo
    boolean isFlavorSerializedObjectType() -> isFlavorSerializedObjectType
    boolean isFlavorRemoteObjectType() -> isFlavorRemoteObjectType
    boolean isFlavorJavaFileListType() -> isFlavorJavaFileListType
    boolean isFlavorTextType() -> isFlavorTextType
    java.io.Reader getReaderForText(myjava.awt.datatransfer.Transferable) -> getReaderForText
    myjava.awt.datatransfer.DataFlavor selectBestTextFlavor(myjava.awt.datatransfer.DataFlavor[]) -> selectBestTextFlavor
    myjava.awt.datatransfer.DataFlavor selectBestFlavorWCharset(java.util.List) -> selectBestFlavorWCharset
    myjava.awt.datatransfer.DataFlavor selectBestByCharset(java.util.List) -> selectBestByCharset
    java.util.List selectBestByAlphabet(java.util.List) -> selectBestByAlphabet
    java.util.List getFlavors(java.util.List,java.lang.String[]) -> getFlavors
    myjava.awt.datatransfer.DataFlavor selectBestFlavorWOCharset(java.util.List) -> selectBestFlavorWOCharset
    java.util.List getFlavors(java.util.List,java.lang.Class) -> getFlavors
    java.util.List sortTextFlavorsByType(java.util.List) -> sortTextFlavorsByType
    java.util.List fetchTextFlavors(java.util.List,java.lang.String) -> fetchTextFlavors
    boolean isUnicodeFlavor() -> isUnicodeFlavor
    boolean isByteCodeFlavor() -> isByteCodeFlavor
myjava.awt.datatransfer.MimeTypeProcessor -> a.a.a.e:
    myjava.awt.datatransfer.MimeTypeProcessor instance -> a
    myjava.awt.datatransfer.MimeTypeProcessor$MimeType parse(java.lang.String) -> a
    java.lang.String assemble(myjava.awt.datatransfer.MimeTypeProcessor$MimeType) -> a
    void retrieveType(java.lang.String,myjava.awt.datatransfer.MimeTypeProcessor$MimeType,myjava.awt.datatransfer.MimeTypeProcessor$StringPosition) -> a
    void retrieveParams(java.lang.String,myjava.awt.datatransfer.MimeTypeProcessor$MimeType,myjava.awt.datatransfer.MimeTypeProcessor$StringPosition) -> b
    void retrieveParam(java.lang.String,myjava.awt.datatransfer.MimeTypeProcessor$MimeType,myjava.awt.datatransfer.MimeTypeProcessor$StringPosition) -> c
    java.lang.String retrieveQuoted(java.lang.String,myjava.awt.datatransfer.MimeTypeProcessor$StringPosition) -> a
    java.lang.String retrieveToken(java.lang.String,myjava.awt.datatransfer.MimeTypeProcessor$StringPosition) -> b
    int getNextMeaningfulIndex(java.lang.String,int) -> a
    boolean isTSpecialChar(char) -> a
    boolean isMeaningfulChar(char) -> b
myjava.awt.datatransfer.MimeTypeProcessor$MimeType -> a.a.a.c:
    java.lang.String primaryType -> a
    java.lang.String subType -> b
    java.util.Hashtable parameters -> c
    java.util.Hashtable systemParameters -> d
    boolean equals(myjava.awt.datatransfer.MimeTypeProcessor$MimeType) -> a
    java.lang.String getPrimaryType() -> a
    java.lang.String getSubType() -> b
    java.lang.String getFullType() -> c
    java.lang.String getParameter(java.lang.String) -> a
    void addParameter(java.lang.String,java.lang.String) -> a
    java.lang.Object clone() -> clone
    java.util.Hashtable access$0(myjava.awt.datatransfer.MimeTypeProcessor$MimeType) -> b
    void access$1(myjava.awt.datatransfer.MimeTypeProcessor$MimeType,java.lang.String) -> a
    void access$2(myjava.awt.datatransfer.MimeTypeProcessor$MimeType,java.lang.String) -> b
    void access$3(myjava.awt.datatransfer.MimeTypeProcessor$MimeType,java.util.Hashtable) -> a
    void access$4(myjava.awt.datatransfer.MimeTypeProcessor$MimeType,java.util.Hashtable) -> b
myjava.awt.datatransfer.MimeTypeProcessor$StringPosition -> a.a.a.b:
    int i -> a
myjava.awt.datatransfer.Transferable -> a.a.a.f:
    java.lang.Object getTransferData(myjava.awt.datatransfer.DataFlavor) -> getTransferData
myjava.awt.datatransfer.UnsupportedFlavorException -> a.a.a.a:
org.achartengine.GraphicalActivity -> org.achartengine.GraphicalActivity:
    org.achartengine.GraphicalView mView -> a
    org.achartengine.chart.AbstractChart mChart -> b
    void onCreate(android.os.Bundle) -> onCreate
org.achartengine.GraphicalView -> org.achartengine.e:
    org.achartengine.chart.AbstractChart mChart -> a
    org.achartengine.renderer.DefaultRenderer mRenderer -> b
    android.graphics.Rect mRect -> c
    android.os.Handler mHandler -> d
    android.graphics.RectF mZoomR -> e
    android.graphics.Bitmap zoomInImage -> f
    android.graphics.Bitmap zoomOutImage -> g
    android.graphics.Bitmap fitZoomImage -> h
    int zoomSize -> i
    int ZOOM_BUTTONS_COLOR -> j
    org.achartengine.tools.Zoom mZoomIn -> k
    org.achartengine.tools.Zoom mZoomOut -> l
    org.achartengine.tools.FitZoom mFitZoom -> m
    android.graphics.Paint mPaint -> n
    org.achartengine.ITouchHandler mTouchHandler -> o
    float oldX -> p
    float oldY -> q
    void onDraw(android.graphics.Canvas) -> onDraw
    void zoomIn() -> a
    void zoomOut() -> b
    void zoomReset() -> c
    android.graphics.RectF getZoomRectangle() -> d
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void repaint() -> e
org.achartengine.GraphicalView$1 -> org.achartengine.d:
    org.achartengine.GraphicalView this$0 -> a
    void run() -> run
org.achartengine.ITouchHandler -> org.achartengine.b:
    boolean handleTouch(android.view.MotionEvent) -> a
org.achartengine.TouchHandler -> org.achartengine.c:
    org.achartengine.renderer.DefaultRenderer mRenderer -> a
    float oldX -> b
    float oldY -> c
    float oldX2 -> d
    float oldY2 -> e
    android.graphics.RectF zoomR -> f
    org.achartengine.tools.Pan mPan -> g
    org.achartengine.tools.Zoom mPinchZoom -> h
    org.achartengine.GraphicalView graphicalView -> i
    boolean handleTouch(android.view.MotionEvent) -> a
org.achartengine.TouchHandlerOld -> org.achartengine.a:
    org.achartengine.renderer.DefaultRenderer mRenderer -> a
    float oldX -> b
    float oldY -> c
    android.graphics.RectF zoomR -> d
    org.achartengine.tools.Pan mPan -> e
    org.achartengine.GraphicalView graphicalView -> f
    boolean handleTouch(android.view.MotionEvent) -> a
org.achartengine.chart.AbstractChart -> org.achartengine.a.i:
    void draw(android.graphics.Canvas,int,int,int,int,android.graphics.Paint) -> a
    void drawBackground(org.achartengine.renderer.DefaultRenderer,android.graphics.Canvas,int,int,int,int,android.graphics.Paint,boolean,int) -> a
    int drawLegend(android.graphics.Canvas,org.achartengine.renderer.DefaultRenderer,java.lang.String[],int,int,int,int,int,int,android.graphics.Paint,boolean) -> a
    void drawString(android.graphics.Canvas,java.lang.String,float,float,android.graphics.Paint) -> a
    boolean getExceed(float,org.achartengine.renderer.DefaultRenderer,int,int) -> a
    boolean isVertical(org.achartengine.renderer.DefaultRenderer) -> a
    float[] calculateDrawPoints(float,float,float,float,int,int) -> a
    void drawPath(android.graphics.Canvas,float[],android.graphics.Paint,boolean) -> a
    int getLegendShapeWidth(int) -> a
    void drawLegendShape(android.graphics.Canvas,org.achartengine.renderer.SimpleSeriesRenderer,float,float,int,android.graphics.Paint) -> a
    int getLegendSize(org.achartengine.renderer.DefaultRenderer,int,float) -> a
    boolean isNullValue(double) -> b
org.achartengine.chart.ClickableArea -> org.achartengine.a.g:
    android.graphics.RectF rect -> a
    double x -> b
    double y -> c
org.achartengine.chart.LineChart -> org.achartengine.a.b:
    org.achartengine.chart.ScatterChart pointsChart -> c
    void drawSeries(android.graphics.Canvas,android.graphics.Paint,float[],org.achartengine.renderer.SimpleSeriesRenderer,float,int,int) -> a
    org.achartengine.chart.ClickableArea[] clickableAreasForPoints(float[],double[],float,int,int) -> a
    int getLegendShapeWidth(int) -> a
    void drawLegendShape(android.graphics.Canvas,org.achartengine.renderer.SimpleSeriesRenderer,float,float,int,android.graphics.Paint) -> a
    boolean isRenderPoints(org.achartengine.renderer.SimpleSeriesRenderer) -> a
    org.achartengine.chart.ScatterChart getPointsChart() -> a
org.achartengine.chart.PointStyle -> org.achartengine.a.h:
    org.achartengine.chart.PointStyle X -> a
    org.achartengine.chart.PointStyle CIRCLE -> b
    org.achartengine.chart.PointStyle TRIANGLE -> c
    org.achartengine.chart.PointStyle SQUARE -> d
    org.achartengine.chart.PointStyle DIAMOND -> e
    org.achartengine.chart.PointStyle POINT -> f
    java.lang.String mName -> g
    org.achartengine.chart.PointStyle[] $VALUES -> h
    org.achartengine.chart.PointStyle[] values() -> values
    org.achartengine.chart.PointStyle valueOf(java.lang.String) -> valueOf
    java.lang.String getName() -> a
    java.lang.String toString() -> toString
org.achartengine.chart.RoundChart -> org.achartengine.a.f:
    org.achartengine.renderer.DefaultRenderer mRenderer -> a
    int mCenterX -> b
    int mCenterY -> c
    int getLegendShapeWidth(int) -> a
    void drawLegendShape(android.graphics.Canvas,org.achartengine.renderer.SimpleSeriesRenderer,float,float,int,android.graphics.Paint) -> a
    org.achartengine.renderer.DefaultRenderer getRenderer() -> a
    int getCenterX() -> b
    int getCenterY() -> c
    void setCenterX(int) -> b
    void setCenterY(int) -> c
org.achartengine.chart.ScatterChart -> org.achartengine.a.d:
    float size -> c
    void drawSeries(android.graphics.Canvas,android.graphics.Paint,float[],org.achartengine.renderer.SimpleSeriesRenderer,float,int,int) -> a
    org.achartengine.chart.ClickableArea[] clickableAreasForPoints(float[],double[],float,int,int) -> a
    int getLegendShapeWidth(int) -> a
    void drawLegendShape(android.graphics.Canvas,org.achartengine.renderer.SimpleSeriesRenderer,float,float,int,android.graphics.Paint) -> a
    void drawX(android.graphics.Canvas,android.graphics.Paint,float,float) -> a
    void drawCircle(android.graphics.Canvas,android.graphics.Paint,float,float) -> b
    void drawTriangle(android.graphics.Canvas,android.graphics.Paint,float[],float,float) -> a
    void drawSquare(android.graphics.Canvas,android.graphics.Paint,float,float) -> c
    void drawDiamond(android.graphics.Canvas,android.graphics.Paint,float[],float,float) -> b
org.achartengine.chart.ScatterChart$1 -> org.achartengine.a.a:
    int[] $SwitchMap$org$achartengine$chart$PointStyle -> a
org.achartengine.chart.TimeChart -> org.achartengine.a.c:
    java.lang.String mDateFormat -> c
    boolean mXAxisSmart -> d
    java.lang.Double mStartPoint -> e
    void setDateFormat(java.lang.String) -> a
    void drawXLabels(java.util.List,java.lang.Double[],android.graphics.Canvas,android.graphics.Paint,int,int,int,double,double,double) -> a
    java.text.DateFormat getDateFormat(double,double) -> a
    java.util.List getXLabels(double,double,int) -> a
org.achartengine.chart.XYChart -> org.achartengine.a.e:
    org.achartengine.model.XYMultipleSeriesDataset mDataset -> a
    org.achartengine.renderer.XYMultipleSeriesRenderer mRenderer -> b
    float mScale -> c
    float mTranslate -> d
    org.achartengine.model.Point mCenter -> e
    android.graphics.Rect mScreenR -> f
    java.util.Map mCalcRange -> g
    java.util.Map clickableAreas -> h
    void draw(android.graphics.Canvas,int,int,int,int,android.graphics.Paint) -> a
    java.util.List getXLabels(double,double,int) -> a
    java.util.Map getYLabels(double[],double[],int) -> a
    java.util.List getValidLabels(java.util.List) -> a
    void drawSeries(org.achartengine.model.XYSeries,android.graphics.Canvas,android.graphics.Paint,java.util.List,org.achartengine.renderer.SimpleSeriesRenderer,float,int,org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation,int) -> a
    void setStroke(android.graphics.Paint$Cap,android.graphics.Paint$Join,float,android.graphics.Paint$Style,android.graphics.PathEffect,android.graphics.Paint) -> a
    void drawChartValuesText(android.graphics.Canvas,org.achartengine.model.XYSeries,org.achartengine.renderer.SimpleSeriesRenderer,android.graphics.Paint,float[],int,int) -> a
    void drawText(android.graphics.Canvas,java.lang.String,float,float,android.graphics.Paint,float) -> a
    void transform(android.graphics.Canvas,float,boolean) -> a
    java.lang.String getLabel(double) -> a
    void drawXLabels(java.util.List,java.lang.Double[],android.graphics.Canvas,android.graphics.Paint,int,int,int,double,double,double) -> a
    void drawYLabels(java.util.Map,android.graphics.Canvas,android.graphics.Paint,int,int,int,int,double[],double[]) -> a
    void drawXTextLabels(java.lang.Double[],android.graphics.Canvas,android.graphics.Paint,boolean,int,int,int,double,double,double) -> a
    org.achartengine.renderer.XYMultipleSeriesRenderer getRenderer() -> b
    org.achartengine.model.XYMultipleSeriesDataset getDataset() -> c
    double[] getCalcRange(int) -> b
    int getLabelLinePos(android.graphics.Paint$Align) -> a
    double[] toRealPoint(float,float,int) -> a
    void drawSeries(android.graphics.Canvas,android.graphics.Paint,float[],org.achartengine.renderer.SimpleSeriesRenderer,float,int,int) -> a
    org.achartengine.chart.ClickableArea[] clickableAreasForPoints(float[],double[],float,int,int) -> a
    boolean isRenderNullValues() -> d
    boolean isRenderPoints(org.achartengine.renderer.SimpleSeriesRenderer) -> a
    org.achartengine.chart.ScatterChart getPointsChart() -> a
org.achartengine.model.Point -> org.achartengine.b.d:
    float mX -> a
    float mY -> b
    float getX() -> a
    float getY() -> b
org.achartengine.model.TimeSeries -> org.achartengine.b.b:
    void add(java.util.Date,double) -> a
org.achartengine.model.XYMultipleSeriesDataset -> org.achartengine.b.a:
    java.util.List mSeries -> a
    void addSeries(org.achartengine.model.XYSeries) -> a
    org.achartengine.model.XYSeries getSeriesAt(int) -> a
    int getSeriesCount() -> a
    org.achartengine.model.XYSeries[] getSeries() -> b
org.achartengine.model.XYSeries -> org.achartengine.b.c:
    java.lang.String mTitle -> a
    org.achartengine.util.IndexXYMap mXY -> b
    double mMinX -> c
    double mMaxX -> d
    double mMinY -> e
    double mMaxY -> f
    int mScaleNumber -> g
    int getScaleNumber() -> a
    void initRange() -> h
    void updateRange(double,double) -> b
    java.lang.String getTitle() -> b
    void add(double,double) -> a
    double getX(int) -> a
    double getY(int) -> b
    java.util.SortedMap getRange(double,double,int) -> a
    int getIndexForKey(double) -> a
    int getItemCount() -> c
    double getMinX() -> d
    double getMinY() -> e
    double getMaxX() -> f
    double getMaxY() -> g
org.achartengine.renderer.BasicStroke -> org.achartengine.c.d:
    org.achartengine.renderer.BasicStroke SOLID -> a
    org.achartengine.renderer.BasicStroke DASHED -> b
    org.achartengine.renderer.BasicStroke DOTTED -> c
    android.graphics.Paint$Cap mCap -> d
    android.graphics.Paint$Join mJoin -> e
    float mMiter -> f
    float[] mIntervals -> g
    float mPhase -> h
    android.graphics.Paint$Cap getCap() -> a
    android.graphics.Paint$Join getJoin() -> b
    float getMiter() -> c
    float[] getIntervals() -> d
    float getPhase() -> e
org.achartengine.renderer.DefaultRenderer -> org.achartengine.c.b:
    java.lang.String mChartTitle -> a
    float mChartTitleTextSize -> b
    android.graphics.Typeface REGULAR_TEXT_FONT -> c
    java.lang.String mTextTypefaceName -> d
    int mTextTypefaceStyle -> e
    int mBackgroundColor -> f
    boolean mApplyBackgroundColor -> g
    boolean mShowAxes -> h
    int mAxesColor -> i
    boolean mShowLabels -> j
    int mLabelsColor -> k
    float mLabelsTextSize -> l
    boolean mShowLegend -> m
    float mLegendTextSize -> n
    boolean mFitLegend -> o
    boolean mShowGridX -> p
    boolean mShowGridY -> q
    boolean mShowCustomTextGrid -> r
    java.util.List mRenderers -> s
    boolean mAntialiasing -> t
    int mLegendHeight -> u
    int[] mMargins -> v
    float mScale -> w
    boolean mPanEnabled -> x
    boolean mZoomEnabled -> y
    boolean mZoomButtonsVisible -> z
    float mZoomRate -> A
    boolean mExternalZoomEnabled -> B
    float mOriginalScale -> C
    boolean mClickEnabled -> D
    int selectableBuffer -> E
    boolean mInScroll -> F
    float mStartAngle -> G
    java.lang.String getChartTitle() -> y
    void setChartTitle(java.lang.String) -> c
    float getChartTitleTextSize() -> z
    void setChartTitleTextSize(float) -> c
    void addSeriesRenderer(org.achartengine.renderer.SimpleSeriesRenderer) -> a
    org.achartengine.renderer.SimpleSeriesRenderer getSeriesRendererAt(int) -> v
    int getSeriesRendererCount() -> A
    int getBackgroundColor() -> B
    void setBackgroundColor(int) -> w
    boolean isApplyBackgroundColor() -> C
    int getAxesColor() -> D
    void setAxesColor(int) -> x
    int getLabelsColor() -> E
    void setLabelsColor(int) -> y
    float getLabelsTextSize() -> F
    void setLabelsTextSize(float) -> d
    boolean isShowAxes() -> G
    boolean isShowLabels() -> H
    boolean isShowGridX() -> I
    boolean isShowGridY() -> J
    boolean isShowCustomTextGrid() -> K
    boolean isShowLegend() -> L
    boolean isFitLegend() -> M
    java.lang.String getTextTypefaceName() -> N
    int getTextTypefaceStyle() -> O
    float getLegendTextSize() -> P
    void setLegendTextSize(float) -> e
    boolean isAntialiasing() -> Q
    float getScale() -> R
    float getOriginalScale() -> S
    void setScale(float) -> f
    boolean isZoomEnabled() -> k
    boolean isZoomButtonsVisible() -> T
    boolean isExternalZoomEnabled() -> U
    float getZoomRate() -> V
    boolean isPanEnabled() -> h
    boolean isClickEnabled() -> W
    int getSelectableBuffer() -> X
    int getLegendHeight() -> Y
    int[] getMargins() -> Z
    void setMargins(int[]) -> a
    boolean isInScroll() -> aa
org.achartengine.renderer.SimpleSeriesRenderer -> org.achartengine.c.e:
    int mColor -> a
    boolean mDisplayChartValues -> b
    float mChartValuesTextSize -> c
    android.graphics.Paint$Align mChartValuesTextAlign -> d
    float mChartValuesSpacing -> e
    org.achartengine.renderer.BasicStroke mStroke -> f
    boolean mGradientEnabled -> g
    int getColor() -> f
    void setColor(int) -> a
    boolean isDisplayChartValues() -> g
    float getChartValuesTextSize() -> h
    android.graphics.Paint$Align getChartValuesTextAlign() -> i
    float getChartValuesSpacing() -> j
    org.achartengine.renderer.BasicStroke getStroke() -> k
org.achartengine.renderer.XYMultipleSeriesRenderer -> org.achartengine.c.a:
    java.lang.String mXTitle -> a
    java.lang.String[] mYTitle -> b
    float mAxisTitleTextSize -> c
    double[] mMinX -> d
    double[] mMaxX -> e
    double[] mMinY -> f
    double[] mMaxY -> g
    int mXLabels -> h
    int mYLabels -> i
    org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation mOrientation -> j
    java.util.Map mXTextLabels -> k
    java.util.Map mYTextLabels -> l
    boolean mPanXEnabled -> m
    boolean mPanYEnabled -> n
    boolean mZoomXEnabled -> o
    boolean mZoomYEnabled -> p
    double mBarSpacing -> q
    int mMarginsColor -> r
    double[] mPanLimits -> s
    double[] mZoomLimits -> t
    float mXLabelsAngle -> u
    float mYLabelsAngle -> v
    java.util.Map initialRange -> w
    float mPointSize -> x
    int mGridColor -> y
    int scalesCount -> z
    android.graphics.Paint$Align xLabelsAlign -> A
    android.graphics.Paint$Align[] yLabelsAlign -> B
    android.graphics.Paint$Align[] yAxisAlign -> C
    int mXLabelsColor -> D
    int[] mYLabelsColor -> E
    void initAxesRange(int) -> a
    void initAxesRangeForScale(int) -> b
    org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation getOrientation() -> a
    java.lang.String getXTitle() -> b
    void setXTitle(java.lang.String) -> a
    java.lang.String getYTitle() -> c
    java.lang.String getYTitle(int) -> c
    void setYTitle(java.lang.String) -> b
    void setYTitle(java.lang.String,int) -> a
    float getAxisTitleTextSize() -> d
    void setAxisTitleTextSize(float) -> a
    void setXAxisMin(double) -> a
    void setXAxisMax(double) -> b
    void setYAxisMin(double) -> c
    void setYAxisMax(double) -> d
    double getXAxisMin(int) -> d
    void setXAxisMin(double,int) -> a
    boolean isMinXSet(int) -> e
    double getXAxisMax(int) -> f
    void setXAxisMax(double,int) -> b
    boolean isMaxXSet(int) -> g
    double getYAxisMin(int) -> h
    void setYAxisMin(double,int) -> c
    boolean isMinYSet(int) -> i
    double getYAxisMax(int) -> j
    void setYAxisMax(double,int) -> d
    boolean isMaxYSet(int) -> k
    int getXLabels() -> e
    void setXLabels(int) -> l
    java.lang.String getXTextLabel(java.lang.Double) -> a
    java.lang.Double[] getXTextLabelLocations() -> f
    java.lang.String getYTextLabel(java.lang.Double,int) -> a
    java.lang.Double[] getYTextLabelLocations(int) -> m
    int getYLabels() -> g
    void setYLabels(int) -> n
    boolean isPanEnabled() -> h
    boolean isPanXEnabled() -> i
    boolean isPanYEnabled() -> j
    boolean isZoomEnabled() -> k
    boolean isZoomXEnabled() -> l
    boolean isZoomYEnabled() -> m
    int getMarginsColor() -> n
    void setMarginsColor(int) -> o
    int getGridColor() -> o
    double[] getPanLimits() -> p
    double[] getZoomLimits() -> q
    float getXLabelsAngle() -> r
    float getYLabelsAngle() -> s
    float getPointSize() -> t
    void setPointSize(float) -> b
    void setRange(double[],int) -> a
    boolean isInitialRangeSet() -> u
    boolean isInitialRangeSet(int) -> p
    double[] getInitialRange(int) -> q
    int getXLabelsColor() -> v
    int getYLabelsColor(int) -> r
    void setXLabelsColor(int) -> s
    void setYLabelsColor(int,int) -> a
    android.graphics.Paint$Align getXLabelsAlign() -> w
    android.graphics.Paint$Align getYLabelsAlign(int) -> t
    android.graphics.Paint$Align getYAxisAlign(int) -> u
    int getScalesCount() -> x
org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation -> org.achartengine.c.f:
    org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation HORIZONTAL -> a
    org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation VERTICAL -> b
    int mAngle -> c
    org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation[] $VALUES -> d
    org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation[] values() -> values
    org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation valueOf(java.lang.String) -> valueOf
    int getAngle() -> a
org.achartengine.renderer.XYSeriesRenderer -> org.achartengine.c.c:
    boolean mFillPoints -> a
    boolean mFillBelowLine -> b
    int mFillColor -> c
    org.achartengine.chart.PointStyle mPointStyle -> d
    float mLineWidth -> e
    boolean isFillBelowLine() -> a
    boolean isFillPoints() -> b
    int getFillBelowLineColor() -> c
    org.achartengine.chart.PointStyle getPointStyle() -> d
    void setPointStyle(org.achartengine.chart.PointStyle) -> a
    float getLineWidth() -> e
org.achartengine.tools.AbstractTool -> org.achartengine.d.b:
    org.achartengine.chart.AbstractChart mChart -> a
    org.achartengine.renderer.XYMultipleSeriesRenderer mRenderer -> b
    double[] getRange(int) -> a
    void checkRange(double[],int) -> a
    void setXRange(double,double,int) -> a
    void setYRange(double,double,int) -> b
org.achartengine.tools.FitZoom -> org.achartengine.d.d:
    void apply() -> a
org.achartengine.tools.Pan -> org.achartengine.d.c:
    java.util.List mPanListeners -> c
    boolean limitsReachedX -> d
    boolean limitsReachedY -> e
    void apply(float,float,float,float) -> a
    double getAxisRatio(double[]) -> a
    void notifyPanListeners() -> a
org.achartengine.tools.PanListener -> org.achartengine.d.a:
    void panApplied() -> a
org.achartengine.tools.Zoom -> org.achartengine.d.e:
    boolean mZoomIn -> c
    float mZoomRate -> d
    java.util.List mZoomListeners -> e
    boolean limitsReachedX -> f
    boolean limitsReachedY -> g
    void setZoomRate(float) -> a
    void apply(int) -> b
    void notifyZoomListeners(org.achartengine.tools.ZoomEvent) -> a
    void notifyZoomResetListeners() -> a
org.achartengine.tools.ZoomEvent -> org.achartengine.d.f:
    boolean mZoomIn -> a
    float mZoomRate -> b
org.achartengine.tools.ZoomListener -> org.achartengine.d.g:
    void zoomApplied(org.achartengine.tools.ZoomEvent) -> a
    void zoomReset() -> a
org.achartengine.util.IndexXYMap -> org.achartengine.e.b:
    java.util.List indexList -> a
    double maxXDifference -> b
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void updateMaxXDifference() -> a
    void clear() -> clear
    java.lang.Object getXByIndex(int) -> a
    java.lang.Object getYByIndex(int) -> b
    int getIndexForKey(java.lang.Object) -> a
org.achartengine.util.MathHelper -> org.achartengine.e.a:
    java.text.NumberFormat FORMAT -> a
    java.util.List getLabels(double,double,int) -> a
    double[] computeLabels(double,double,int) -> b
    double roundUp(double) -> a
    float[] getFloats(java.util.List) -> a
    double[] getDoubles(java.util.List) -> b
org.apache.harmony.awt.ContextStorage -> org.a.a.a.b:
    boolean shutdownPending -> a
    org.apache.harmony.awt.ContextStorage globalContext -> b
    org.apache.harmony.awt.datatransfer.DTK dtk -> c
    java.lang.Object contextLock -> d
    void setDTK(org.apache.harmony.awt.datatransfer.DTK) -> a
    org.apache.harmony.awt.datatransfer.DTK getDTK() -> a
    java.lang.Object getContextLock() -> b
    org.apache.harmony.awt.ContextStorage getCurrentContext() -> d
    boolean shutdownPending() -> c
org.apache.harmony.awt.ContextStorage$ContextLock -> org.a.a.a.a:
    org.apache.harmony.awt.ContextStorage this$0 -> a
org.apache.harmony.awt.datatransfer.DTK -> org.a.a.a.a.b:
    org.apache.harmony.awt.datatransfer.NativeClipboard nativeClipboard -> b
    org.apache.harmony.awt.datatransfer.NativeClipboard nativeSelection -> c
    org.apache.harmony.awt.datatransfer.DataTransferThread dataTransferThread -> a
    org.apache.harmony.awt.datatransfer.DTK getDTK() -> a
    void initDragAndDrop() -> b
    void runEventLoop() -> c
    org.apache.harmony.awt.datatransfer.DTK createDTK() -> e
    java.lang.String getDefaultCharset() -> d
org.apache.harmony.awt.datatransfer.DataTransferThread -> org.a.a.a.a.a:
    org.apache.harmony.awt.datatransfer.DTK dtk -> a
    void run() -> run
    void start() -> start
org.apache.harmony.awt.datatransfer.NativeClipboard -> org.a.a.a.a.c:
org.apache.harmony.awt.internal.nls.Messages -> org.a.a.a.b.a.a:
    java.util.ResourceBundle bundle -> a
    java.lang.String getString(java.lang.String) -> a
    java.lang.String getString(java.lang.String,java.lang.Object) -> a
    java.lang.String getString(java.lang.String,java.lang.Object[]) -> a
    java.lang.String format(java.lang.String,java.lang.Object[]) -> b
    java.util.ResourceBundle setLocale(java.util.Locale,java.lang.String) -> a
org.apache.harmony.awt.internal.nls.Messages$1 -> org.a.a.a.b.a.b:
    java.lang.String val$resource -> a
    java.util.Locale val$locale -> b
    java.lang.ClassLoader val$loader -> c
    java.lang.Object run() -> run
org.apache.harmony.misc.SystemUtils -> org.a.a.b.a:
    int os -> a
    int arc -> b
    int getOS() -> a
